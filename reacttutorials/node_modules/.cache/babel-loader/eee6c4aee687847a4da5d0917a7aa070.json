{"ast":null,"code":"/**\n * SimpleBar.js - v1.0.2\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\nimport { throttle, debounce, memoize } from 'lodash-es';\nimport canUseDOM from 'can-use-dom';\nlet cachedScrollbarWidth = null;\nlet cachedDevicePixelRatio = null;\n\nif (canUseDOM) {\n  window.addEventListener('resize', () => {\n    if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n      cachedDevicePixelRatio = window.devicePixelRatio;\n      cachedScrollbarWidth = null;\n    }\n  });\n}\n\nfunction scrollbarWidth() {\n  if (cachedScrollbarWidth === null) {\n    if (typeof document === 'undefined') {\n      cachedScrollbarWidth = 0;\n      return cachedScrollbarWidth;\n    }\n\n    const body = document.body;\n    const box = document.createElement('div');\n    box.classList.add('simplebar-hide-scrollbar');\n    body.appendChild(box);\n    const width = box.getBoundingClientRect().right;\n    body.removeChild(box);\n    cachedScrollbarWidth = width;\n  }\n\n  return cachedScrollbarWidth;\n}\n\nfunction getElementWindow(element) {\n  if (!element || !element.ownerDocument || !element.ownerDocument.defaultView) {\n    return window;\n  }\n\n  return element.ownerDocument.defaultView;\n}\n\nfunction getElementDocument(element) {\n  if (!element || !element.ownerDocument) {\n    return document;\n  }\n\n  return element.ownerDocument;\n}\n\nclass SimpleBar {\n  constructor(element, options = {}) {\n    this.onScroll = () => {\n      const elWindow = getElementWindow(this.el);\n\n      if (!this.scrollXTicking) {\n        elWindow.requestAnimationFrame(this.scrollX);\n        this.scrollXTicking = true;\n      }\n\n      if (!this.scrollYTicking) {\n        elWindow.requestAnimationFrame(this.scrollY);\n        this.scrollYTicking = true;\n      }\n\n      if (!this.isScrolling) {\n        this.isScrolling = true;\n        this.el.classList.add(this.classNames.scrolling);\n      }\n\n      this.onStopScrolling();\n    };\n\n    this.scrollX = () => {\n      if (this.axis.x.isOverflowing) {\n        this.positionScrollbar('x');\n      }\n\n      this.scrollXTicking = false;\n    };\n\n    this.scrollY = () => {\n      if (this.axis.y.isOverflowing) {\n        this.positionScrollbar('y');\n      }\n\n      this.scrollYTicking = false;\n    };\n\n    this.onStopScrolling = () => {\n      this.el.classList.remove(this.classNames.scrolling);\n      this.isScrolling = false;\n    };\n\n    this.onMouseEnter = () => {\n      if (!this.isMouseEntering) {\n        this.el.classList.add(this.classNames.mouseEntered);\n        this.isMouseEntering = true;\n      }\n\n      this.onMouseEntered();\n    };\n\n    this.onMouseEntered = () => {\n      this.el.classList.remove(this.classNames.mouseEntered);\n      this.isMouseEntering = false;\n    };\n\n    this.onMouseMove = e => {\n      this.mouseX = e.clientX;\n      this.mouseY = e.clientY;\n\n      if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n        this.onMouseMoveForAxis('x');\n      }\n\n      if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n        this.onMouseMoveForAxis('y');\n      }\n    };\n\n    this.onMouseLeave = () => {\n      this.onMouseMove.cancel();\n\n      if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n        this.onMouseLeaveForAxis('x');\n      }\n\n      if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n        this.onMouseLeaveForAxis('y');\n      }\n\n      this.mouseX = -1;\n      this.mouseY = -1;\n    };\n\n    this.onWindowResize = () => {\n      // Recalculate scrollbarWidth in case it's a zoom\n      this.scrollbarWidth = this.getScrollbarWidth();\n      this.hideNativeScrollbar();\n    };\n\n    this.onPointerEvent = e => {\n      let isWithinTrackXBounds, isWithinTrackYBounds;\n      this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n      this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n      if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n        isWithinTrackXBounds = this.isWithinBounds(this.axis.x.track.rect);\n      }\n\n      if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n        isWithinTrackYBounds = this.isWithinBounds(this.axis.y.track.rect);\n      } // If any pointer event is called on the scrollbar\n\n\n      if (isWithinTrackXBounds || isWithinTrackYBounds) {\n        // Preventing the event's default action stops text being\n        // selectable during the drag.\n        e.preventDefault(); // Prevent event leaking\n\n        e.stopPropagation();\n\n        if (e.type === 'mousedown') {\n          if (isWithinTrackXBounds) {\n            this.axis.x.scrollbar.rect = this.axis.x.scrollbar.el.getBoundingClientRect();\n\n            if (this.isWithinBounds(this.axis.x.scrollbar.rect)) {\n              this.onDragStart(e, 'x');\n            } else {\n              this.onTrackClick(e, 'x');\n            }\n          }\n\n          if (isWithinTrackYBounds) {\n            this.axis.y.scrollbar.rect = this.axis.y.scrollbar.el.getBoundingClientRect();\n\n            if (this.isWithinBounds(this.axis.y.scrollbar.rect)) {\n              this.onDragStart(e, 'y');\n            } else {\n              this.onTrackClick(e, 'y');\n            }\n          }\n        }\n      }\n    };\n\n    this.drag = e => {\n      let eventOffset;\n      const track = this.axis[this.draggedAxis].track;\n      const trackSize = track.rect[this.axis[this.draggedAxis].sizeAttr];\n      const scrollbar = this.axis[this.draggedAxis].scrollbar;\n      const contentSize = this.contentWrapperEl[this.axis[this.draggedAxis].scrollSizeAttr];\n      const hostSize = parseInt(this.elStyles[this.axis[this.draggedAxis].sizeAttr], 10);\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (this.draggedAxis === 'y') {\n        eventOffset = e.pageY;\n      } else {\n        eventOffset = e.pageX;\n      } // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n\n\n      let dragPos = eventOffset - track.rect[this.axis[this.draggedAxis].offsetAttr] - this.axis[this.draggedAxis].dragOffset; // Convert the mouse position into a percentage of the scrollbar height/width.\n\n      let dragPerc = dragPos / (trackSize - scrollbar.size); // Scroll the content by the same percentage.\n\n      let scrollPos = dragPerc * (contentSize - hostSize); // Fix browsers inconsistency on RTL\n\n      if (this.draggedAxis === 'x') {\n        scrollPos = this.isRtl && SimpleBar.getRtlHelpers().isScrollOriginAtZero ? scrollPos - (trackSize + scrollbar.size) : scrollPos;\n      }\n\n      this.contentWrapperEl[this.axis[this.draggedAxis].scrollOffsetAttr] = scrollPos;\n    };\n\n    this.onEndDrag = e => {\n      const elDocument = getElementDocument(this.el);\n      const elWindow = getElementWindow(this.el);\n      e.preventDefault();\n      e.stopPropagation();\n      this.el.classList.remove(this.classNames.dragging);\n      elDocument.removeEventListener('mousemove', this.drag, true);\n      elDocument.removeEventListener('mouseup', this.onEndDrag, true);\n      this.removePreventClickId = elWindow.setTimeout(() => {\n        // Remove these asynchronously so we still suppress click events\n        // generated simultaneously with mouseup.\n        elDocument.removeEventListener('click', this.preventClick, true);\n        elDocument.removeEventListener('dblclick', this.preventClick, true);\n        this.removePreventClickId = null;\n      });\n    };\n\n    this.preventClick = e => {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    this.el = element;\n    this.minScrollbarWidth = 20;\n    this.stopScrollDelay = 175;\n    this.options = { ...SimpleBar.defaultOptions,\n      ...options\n    };\n    this.classNames = {\n      contentEl: 'simplebar-content',\n      contentWrapper: 'simplebar-content-wrapper',\n      offset: 'simplebar-offset',\n      mask: 'simplebar-mask',\n      wrapper: 'simplebar-wrapper',\n      placeholder: 'simplebar-placeholder',\n      scrollbar: 'simplebar-scrollbar',\n      track: 'simplebar-track',\n      heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n      heightAutoObserverEl: 'simplebar-height-auto-observer',\n      visible: 'simplebar-visible',\n      horizontal: 'simplebar-horizontal',\n      vertical: 'simplebar-vertical',\n      hover: 'simplebar-hover',\n      dragging: 'simplebar-dragging',\n      scrolling: 'simplebar-scrolling',\n      scrollable: 'simplebar-scrollable',\n      mouseEntered: 'simplebar-mouse-entered',\n      ...this.options.classNames\n    };\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetSizeAttr: 'offsetWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetSizeAttr: 'offsetHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null;\n    this.isScrolling = false;\n    this.isMouseEntering = false; // Don't re-instantiate over an existing one\n\n    if (SimpleBar.instances.has(this.el)) {\n      return;\n    }\n\n    if (options.classNames) {\n      console.warn('simplebar: classNames option is deprecated. Please override the styles with CSS instead.');\n    }\n\n    if (options.autoHide) {\n      console.warn(\"simplebar: autoHide option is deprecated. Please use CSS instead: '.simplebar-scrollbar::before { opacity: 0.5 };' for autoHide: false\");\n    }\n\n    this.onMouseMove = throttle(this.onMouseMove, 64);\n    this.onWindowResize = debounce(this.onWindowResize, 64, {\n      leading: true\n    });\n    this.onStopScrolling = debounce(this.onStopScrolling, this.stopScrollDelay);\n    this.onMouseEntered = debounce(this.onMouseEntered, this.stopScrollDelay);\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n    this.init();\n  }\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n\n\n  static getRtlHelpers() {\n    const dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML = '<div class=\"simplebar-dummy-scrollbar-size\"><div></div></div>';\n    const scrollbarDummyEl = dummyDiv.firstElementChild;\n    const dummyChild = scrollbarDummyEl.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    scrollbarDummyEl.scrollLeft = 0;\n    const dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    const dummyChildOffset = SimpleBar.getOffset(dummyChild);\n    scrollbarDummyEl.scrollLeft = -999;\n    const dummyChildOffsetAfterScroll = SimpleBar.getOffset(dummyChild);\n    return {\n      // determines if the scrolling is responding with negative values\n      isScrollOriginAtZero: dummyContainerOffset.left !== dummyChildOffset.left,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isScrollingToNegative: dummyChildOffset.left !== dummyChildOffsetAfterScroll.left\n    };\n  }\n\n  static getOffset(el) {\n    const rect = el.getBoundingClientRect();\n    const elDocument = getElementDocument(el);\n    const elWindow = getElementWindow(el);\n    return {\n      top: rect.top + (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n      left: rect.left + (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n    };\n  }\n\n  init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    SimpleBar.instances.set(this.el, this); // We stop here on server-side\n\n    if (canUseDOM) {\n      this.initDOM();\n      this.scrollbarWidth = this.getScrollbarWidth();\n      this.recalculate();\n      this.initListeners();\n    }\n  }\n\n  initDOM() {\n    // make sure this element doesn't have the elements yet\n    if (Array.prototype.filter.call(this.el.children, child => child.classList.contains(this.classNames.wrapper)).length) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(`.${this.classNames.wrapper}`);\n      this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(`.${this.classNames.contentWrapper}`);\n      this.contentEl = this.options.contentNode || this.el.querySelector(`.${this.classNames.contentEl}`);\n      this.offsetEl = this.el.querySelector(`.${this.classNames.offset}`);\n      this.maskEl = this.el.querySelector(`.${this.classNames.mask}`);\n      this.placeholderEl = this.findChild(this.wrapperEl, `.${this.classNames.placeholder}`);\n      this.heightAutoObserverWrapperEl = this.el.querySelector(`.${this.classNames.heightAutoObserverWrapperEl}`);\n      this.heightAutoObserverEl = this.el.querySelector(`.${this.classNames.heightAutoObserverEl}`);\n      this.axis.x.track.el = this.findChild(this.el, `.${this.classNames.track}.${this.classNames.horizontal}`);\n      this.axis.y.track.el = this.findChild(this.el, `.${this.classNames.track}.${this.classNames.vertical}`);\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      const track = document.createElement('div');\n      const scrollbar = document.createElement('div');\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n      track.appendChild(scrollbar);\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(`.${this.classNames.scrollbar}`);\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(`.${this.classNames.scrollbar}`);\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  }\n\n  initListeners() {\n    const elWindow = getElementWindow(this.el); // Event listeners\n\n    this.el.addEventListener('mouseenter', this.onMouseEnter);\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll); // Browser zoom triggers a window resize\n\n    elWindow.addEventListener('resize', this.onWindowResize);\n\n    if (window.ResizeObserver) {\n      // Hack for https://github.com/WICG/ResizeObserver/issues/38\n      let resizeObserverStarted = false;\n      const resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n      this.resizeObserver = new resizeObserver(() => {\n        if (!resizeObserverStarted) return;\n        elWindow.requestAnimationFrame(() => {\n          this.recalculate();\n        });\n      });\n      this.resizeObserver.observe(this.el);\n      this.resizeObserver.observe(this.contentEl);\n      elWindow.requestAnimationFrame(() => {\n        resizeObserverStarted = true;\n      });\n    } // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n\n\n    this.mutationObserver = new elWindow.MutationObserver(() => {\n      elWindow.requestAnimationFrame(() => {\n        this.recalculate();\n      });\n    });\n    this.mutationObserver.observe(this.contentEl, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n\n  recalculate() {\n    const elWindow = getElementWindow(this.el);\n    this.elStyles = elWindow.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n    const contentElOffsetWidth = this.contentEl.offsetWidth;\n    const isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    const isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1 || contentElOffsetWidth > 0;\n    const contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n    const elOverflowX = this.elStyles.overflowX;\n    const elOverflowY = this.elStyles.overflowY;\n    this.contentEl.style.padding = `${this.elStyles.paddingTop} ${this.elStyles.paddingRight} ${this.elStyles.paddingBottom} ${this.elStyles.paddingLeft}`;\n    this.wrapperEl.style.margin = `-${this.elStyles.paddingTop} -${this.elStyles.paddingRight} -${this.elStyles.paddingBottom} -${this.elStyles.paddingLeft}`;\n    const contentElScrollHeight = this.contentEl.scrollHeight;\n    const contentElScrollWidth = this.contentEl.scrollWidth;\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%'; // Determine placeholder size\n\n    this.placeholderEl.style.width = isWidthAuto ? `${contentElOffsetWidth || contentElScrollWidth}px` : 'auto';\n    this.placeholderEl.style.height = `${contentElScrollHeight}px`;\n    const contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n    this.axis.x.isOverflowing = contentElOffsetWidth !== 0 && contentElScrollWidth > contentElOffsetWidth;\n    this.axis.y.isOverflowing = contentElScrollHeight > contentWrapperElOffsetHeight; // Set isOverflowing to false if user explicitely set hidden overflow\n\n    this.axis.x.isOverflowing = elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing = elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n    this.axis.x.forceVisible = this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible = this.options.forceVisible === 'y' || this.options.forceVisible === true;\n    this.hideNativeScrollbar(); // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n\n    let offsetForXScrollbar = this.axis.x.isOverflowing ? this.scrollbarWidth : 0;\n    let offsetForYScrollbar = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;\n    this.axis.x.isOverflowing = this.axis.x.isOverflowing && contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n    this.axis.y.isOverflowing = this.axis.y.isOverflowing && contentElScrollHeight > contentWrapperElOffsetHeight - offsetForXScrollbar;\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n    this.axis.x.scrollbar.el.style.width = `${this.axis.x.scrollbar.size}px`;\n    this.axis.y.scrollbar.el.style.height = `${this.axis.y.scrollbar.size}px`;\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n  /**\n   * Calculate scrollbar size\n   */\n\n\n  getScrollbarSize(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return 0;\n    }\n\n    const contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    let scrollbarSize;\n    let scrollbarRatio = trackSize / contentSize; // Calculate new height/position of drag handle.\n\n    scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  }\n\n  positionScrollbar(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    const contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    const scrollbar = this.axis[axis].scrollbar;\n    let scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isScrollOriginAtZero ? -scrollOffset : scrollOffset;\n    let scrollPourcent = scrollOffset / (contentSize - hostSize);\n    let handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isScrollingToNegative ? -handleOffset + (trackSize - scrollbar.size) : handleOffset;\n    scrollbar.el.style.transform = axis === 'x' ? `translate3d(${handleOffset}px, 0, 0)` : `translate3d(0, ${handleOffset}px, 0)`;\n  }\n\n  toggleTrackVisibility(axis = 'y') {\n    const track = this.axis[axis].track.el;\n    const scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n      this.el.classList.add(`${this.classNames.scrollable}-${axis}`);\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n      this.el.classList.remove(`${this.classNames.scrollable}-${axis}`);\n    } // Even if forceVisible is enabled, scrollbar itself should be hidden\n\n\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  }\n\n  hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? `-${this.scrollbarWidth}px` : 0;\n    this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? `-${this.scrollbarWidth}px` : 0;\n  }\n  /**\n   * On scroll event handling\n   */\n\n\n  onMouseMoveForAxis(axis = 'y') {\n    this.axis[axis].track.rect = this.axis[axis].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    const isWithinScrollbarBoundsX = this.isWithinBounds(this.axis[axis].scrollbar.rect);\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  }\n\n  onMouseLeaveForAxis(axis = 'y') {\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  }\n  /**\n   * on scrollbar handle drag movement starts\n   */\n\n\n  onDragStart(e, axis = 'y') {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    const scrollbar = this.axis[axis].scrollbar; // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n\n    const eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset = eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n    this.el.classList.add(this.classNames.dragging);\n    elDocument.addEventListener('mousemove', this.drag, true);\n    elDocument.addEventListener('mouseup', this.onEndDrag, true);\n\n    if (this.removePreventClickId === null) {\n      elDocument.addEventListener('click', this.preventClick, true);\n      elDocument.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      elWindow.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n  /**\n   * Drag scrollbar handle\n   */\n\n\n  onTrackClick(e, axis = 'y') {\n    if (!this.options.clickOnTrack) return;\n    const elWindow = getElementWindow(this.el);\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    const scrollbar = this.axis[axis].scrollbar;\n    const scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    let scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    const t = axis === 'y' ? this.mouseY - scrollbarOffset : this.mouseX - scrollbarOffset;\n    const dir = t < 0 ? -1 : 1;\n    const scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n    const speed = 40;\n\n    const scrollTo = () => {\n      if (dir === -1) {\n        if (scrolled > scrollSize) {\n          scrolled -= speed;\n        }\n      } else {\n        if (scrolled < scrollSize) {\n          scrolled += speed;\n        }\n      }\n\n      this.contentWrapperEl[this.axis[axis].scrollOffsetAttr] = scrolled;\n      elWindow.requestAnimationFrame(scrollTo);\n    };\n\n    scrollTo();\n  }\n  /**\n   * Getter for content element\n   */\n\n\n  getContentElement() {\n    return this.contentEl;\n  }\n  /**\n   * Getter for original scrolling element\n   */\n\n\n  getScrollElement() {\n    return this.contentWrapperEl;\n  }\n\n  getScrollbarWidth() {\n    // Try/catch for FF 56 throwing on undefined computedStyles\n    try {\n      // Detect browsers supporting CSS scrollbar styling and do not calculate\n      if (getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar').display === 'none' || 'scrollbarWidth' in document.documentElement.style || '-ms-overflow-style' in document.documentElement.style) {\n        return 0;\n      } else {\n        return scrollbarWidth();\n      }\n    } catch (e) {\n      return scrollbarWidth();\n    }\n  }\n\n  removeListeners() {\n    const elWindow = getElementWindow(this.el); // Event listeners\n\n    this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n    this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    elWindow.removeEventListener('resize', this.onWindowResize);\n    this.mutationObserver.disconnect();\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    } // Cancel all debounced functions\n\n\n    this.onMouseMove.cancel();\n    this.onWindowResize.cancel();\n    this.onStopScrolling.cancel();\n    this.onMouseEntered.cancel();\n  }\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n\n\n  unMount() {\n    this.removeListeners();\n    SimpleBar.instances.delete(this.el);\n  }\n  /**\n   * Check if mouse is within bounds\n   */\n\n\n  isWithinBounds(bbox) {\n    return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;\n  }\n  /**\n   * Find element children matches query\n   */\n\n\n  findChild(el, query) {\n    const matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, child => matches.call(child, query))[0];\n  }\n\n}\n\nSimpleBar.defaultOptions = {\n  autoHide: true,\n  forceVisible: false,\n  clickOnTrack: true,\n  scrollbarMinSize: 25,\n  scrollbarMaxSize: 0\n};\nSimpleBar.instances = new WeakMap();\nexport default SimpleBar;","map":{"version":3,"sources":["../src/scrollbar-width.js","../src/helpers.js","../src/index.js"],"names":["cachedScrollbarWidth","cachedDevicePixelRatio","window","body","document","box","width","element","SimpleBar","constructor","options","contentEl","contentWrapper","offset","mask","wrapper","placeholder","scrollbar","track","heightAutoObserverWrapperEl","heightAutoObserverEl","visible","horizontal","vertical","hover","dragging","scrolling","scrollable","mouseEntered","classNames","x","scrollOffsetAttr","sizeAttr","scrollSizeAttr","offsetSizeAttr","offsetAttr","overflowAttr","dragOffset","isOverflowing","isVisible","forceVisible","y","console","throttle","debounce","leading","memoize","dummyDiv","scrollbarDummyEl","dummyChild","dummyContainerOffset","dummyChildOffset","dummyChildOffsetAfterScroll","isScrollOriginAtZero","isScrollingToNegative","left","defaultOptions","autoHide","clickOnTrack","scrollbarMinSize","scrollbarMaxSize","rect","el","elDocument","getElementDocument","elWindow","getElementWindow","top","instances","init","initDOM","Array","child","initListeners","e","capture","passive","resizeObserverStarted","resizeObserver","childList","subtree","characterData","recalculate","contentElOffsetWidth","isHeightAuto","isWidthAuto","contentWrapperElOffsetWidth","elOverflowX","elOverflowY","paddingTop","paddingRight","paddingBottom","paddingLeft","contentElScrollHeight","contentElScrollWidth","contentWrapperElOffsetHeight","offsetForXScrollbar","offsetForYScrollbar","size","getScrollbarSize","axis","contentSize","trackSize","scrollbarRatio","scrollbarSize","Math","positionScrollbar","hostSize","parseInt","scrollOffset","scrollPourcent","handleOffset","toggleTrackVisibility","hideNativeScrollbar","scrollbarWidth","onMouseMoveForAxis","isWithinScrollbarBoundsX","onMouseLeaveForAxis","isWithinTrackXBounds","isWithinTrackYBounds","onDragStart","eventOffset","dragPos","dragPerc","scrollPos","onTrackClick","scrollbarOffset","scrolled","t","dir","scrollSize","speed","scrollTo","getContentElement","getScrollElement","getScrollbarWidth","getComputedStyle","removeListeners","unMount","isWithinBounds","bbox","findChild","matches"],"mappings":";;;;;;;;;;AAEA,IAAIA,oBAAoB,GAAxB,IAAA;AACA,IAAIC,sBAAsB,GAA1B,IAAA;;AAEA,IAAA,SAAA,EAAe;AACbC,EAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAkC,MAAM;AACtC,QAAID,sBAAsB,KAAKC,MAAM,CAArC,gBAAA,EAAwD;AACtDD,MAAAA,sBAAsB,GAAGC,MAAM,CAA/BD,gBAAAA;AACAD,MAAAA,oBAAoB,GAApBA,IAAAA;AACD;AAJHE,GAAAA;AAMD;;AAEc,SAAA,cAAA,GAA0B;AACvC,MAAIF,oBAAoB,KAAxB,IAAA,EAAmC;AACjC,QAAI,OAAA,QAAA,KAAJ,WAAA,EAAqC;AACnCA,MAAAA,oBAAoB,GAApBA,CAAAA;AACA,aAAA,oBAAA;AACD;;AAED,UAAMG,IAAI,GAAGC,QAAQ,CAArB,IAAA;AACA,UAAMC,GAAG,GAAGD,QAAQ,CAARA,aAAAA,CAAZ,KAAYA,CAAZ;AAEAC,IAAAA,GAAG,CAAHA,SAAAA,CAAAA,GAAAA,CAAAA,0BAAAA;AAEAF,IAAAA,IAAI,CAAJA,WAAAA,CAAAA,GAAAA;AAEA,UAAMG,KAAK,GAAGD,GAAG,CAAHA,qBAAAA,GAAd,KAAA;AAEAF,IAAAA,IAAI,CAAJA,WAAAA,CAAAA,GAAAA;AAEAH,IAAAA,oBAAoB,GAApBA,KAAAA;AACD;;AAED,SAAA,oBAAA;AACD;;ACpCM,SAAA,gBAAA,CAAA,OAAA,EAAmC;AACxC,MACE,CAAA,OAAA,IACA,CAACO,OAAO,CADR,aAAA,IAEA,CAACA,OAAO,CAAPA,aAAAA,CAHH,WAAA,EAIE;AACA,WAAA,MAAA;AACD;;AACD,SAAOA,OAAO,CAAPA,aAAAA,CAAP,WAAA;AACD;;AAEM,SAAA,kBAAA,CAAA,OAAA,EAAqC;AAC1C,MAAI,CAAA,OAAA,IAAY,CAACA,OAAO,CAAxB,aAAA,EAAwC;AACtC,WAAA,QAAA;AACD;;AACD,SAAOA,OAAO,CAAd,aAAA;AACD;;ACXc,MAAA,SAAA,CAAgB;AAC7BE,EAAAA,WAAW,CAAA,OAAA,EAAUC,OAAO,GAAjB,EAAA,EAAwB;AAAA,SAAA,QAAA,GA2fxB,MAAM;AACf,YAAMuD,QAAQ,GAAGC,gBAAgB,CAAC,KAAlC,EAAiC,CAAjC;;AAEA,UAAI,CAAC,KAAL,cAAA,EAA0B;AACxBD,QAAAA,QAAQ,CAARA,qBAAAA,CAA+B,KAA/BA,OAAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACD;;AAED,UAAI,CAAC,KAAL,cAAA,EAA0B;AACxBA,QAAAA,QAAQ,CAARA,qBAAAA,CAA+B,KAA/BA,OAAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACD;;AAED,UAAI,CAAC,KAAL,WAAA,EAAuB;AACrB,aAAA,WAAA,GAAA,IAAA;AACA,aAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAsB,KAAA,UAAA,CAAtB,SAAA;AACD;;AAED,WAAA,eAAA;AA7gBiC,KAAA;;AAAA,SAAA,OAAA,GAghBzB,MAAM;AACd,UAAI,KAAA,IAAA,CAAA,CAAA,CAAJ,aAAA,EAA+B;AAC7B,aAAA,iBAAA,CAAA,GAAA;AACD;;AAED,WAAA,cAAA,GAAA,KAAA;AArhBiC,KAAA;;AAAA,SAAA,OAAA,GAwhBzB,MAAM;AACd,UAAI,KAAA,IAAA,CAAA,CAAA,CAAJ,aAAA,EAA+B;AAC7B,aAAA,iBAAA,CAAA,GAAA;AACD;;AAED,WAAA,cAAA,GAAA,KAAA;AA7hBiC,KAAA;;AAAA,SAAA,eAAA,GAgiBjB,MAAM;AACtB,WAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAyB,KAAA,UAAA,CAAzB,SAAA;AACA,WAAA,WAAA,GAAA,KAAA;AAliBiC,KAAA;;AAAA,SAAA,YAAA,GAqiBpB,MAAM;AACnB,UAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,aAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAsB,KAAA,UAAA,CAAtB,YAAA;AACA,aAAA,eAAA,GAAA,IAAA;AACD;;AACD,WAAA,cAAA;AA1iBiC,KAAA;;AAAA,SAAA,cAAA,GA6iBlB,MAAM;AACrB,WAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAyB,KAAA,UAAA,CAAzB,YAAA;AACA,WAAA,eAAA,GAAA,KAAA;AA/iBiC,KAAA;;AAAA,SAAA,WAAA,GAkjBpBS,CAAD,IAAO;AACnB,WAAA,MAAA,GAAcA,CAAC,CAAf,OAAA;AACA,WAAA,MAAA,GAAcA,CAAC,CAAf,OAAA;;AAEA,UAAI,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAAjC,YAAA,EAA2D;AACzD,aAAA,kBAAA,CAAA,GAAA;AACD;;AAED,UAAI,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAAjC,YAAA,EAA2D;AACzD,aAAA,kBAAA,CAAA,GAAA;AACD;AA5jBgC,KAAA;;AAAA,SAAA,YAAA,GAwlBpB,MAAM;AACnB,WAAA,WAAA,CAAA,MAAA;;AAEA,UAAI,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAAjC,YAAA,EAA2D;AACzD,aAAA,mBAAA,CAAA,GAAA;AACD;;AAED,UAAI,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAAjC,YAAA,EAA2D;AACzD,aAAA,mBAAA,CAAA,GAAA;AACD;;AAED,WAAA,MAAA,GAAc,CAAd,CAAA;AACA,WAAA,MAAA,GAAc,CAAd,CAAA;AApmBiC,KAAA;;AAAA,SAAA,cAAA,GA4mBlB,MAAM;AACrB;AACA,WAAA,cAAA,GAAsB,KAAtB,iBAAsB,EAAtB;AAEA,WAAA,mBAAA;AAhnBiC,KAAA;;AAAA,SAAA,cAAA,GAmnBjBA,CAAD,IAAO;AACtB,UAAA,oBAAA,EAAA,oBAAA;AAEA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,IAAA,GAAyB,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,CAAzB,qBAAyB,EAAzB;AACA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,IAAA,GAAyB,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,CAAzB,qBAAyB,EAAzB;;AAEA,UAAI,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAAjC,YAAA,EAA2D;AACzD4C,QAAAA,oBAAoB,GAAG,KAAA,cAAA,CAAoB,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAA3CA,IAAuB,CAAvBA;AACD;;AAED,UAAI,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAAjC,YAAA,EAA2D;AACzDC,QAAAA,oBAAoB,GAAG,KAAA,cAAA,CAAoB,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAA3CA,IAAuB,CAAvBA;AAXoB,OAAA,CAAA;;;AAetB,UAAID,oBAAoB,IAAxB,oBAAA,EAAkD;AAChD;AACA;AACA5C,QAAAA,CAAC,CAH+C,cAGhDA,GAHgD,CAAA;;AAKhDA,QAAAA,CAAC,CAADA,eAAAA;;AAEA,YAAIA,CAAC,CAADA,IAAAA,KAAJ,WAAA,EAA4B;AAC1B,cAAA,oBAAA,EAA0B;AACxB,iBAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,IAAA,GAA6B,KAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAA7B,qBAA6B,EAA7B;;AAEA,gBAAI,KAAA,cAAA,CAAoB,KAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAxB,IAAI,CAAJ,EAAqD;AACnD,mBAAA,WAAA,CAAA,CAAA,EAAA,GAAA;AADF,aAAA,MAEO;AACL,mBAAA,YAAA,CAAA,CAAA,EAAA,GAAA;AACD;AACF;;AAED,cAAA,oBAAA,EAA0B;AACxB,iBAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,IAAA,GAA6B,KAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAA7B,qBAA6B,EAA7B;;AAEA,gBAAI,KAAA,cAAA,CAAoB,KAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAxB,IAAI,CAAJ,EAAqD;AACnD,mBAAA,WAAA,CAAA,CAAA,EAAA,GAAA;AADF,aAAA,MAEO;AACL,mBAAA,YAAA,CAAA,CAAA,EAAA,GAAA;AACD;AACF;AACF;AACF;AA9pBgC,KAAA;;AAAA,SAAA,IAAA,GA+rB3BA,CAAD,IAAO;AACZ,UAAA,WAAA;AACA,YAAMxD,KAAK,GAAG,KAAA,IAAA,CAAU,KAAV,WAAA,EAAd,KAAA;AACA,YAAMoF,SAAS,GAAGpF,KAAK,CAALA,IAAAA,CAAW,KAAA,IAAA,CAAU,KAAV,WAAA,EAA7B,QAAkBA,CAAlB;AACA,YAAMD,SAAS,GAAG,KAAA,IAAA,CAAU,KAAV,WAAA,EAAlB,SAAA;AACA,YAAMoF,WAAW,GAAG,KAAA,gBAAA,CAClB,KAAA,IAAA,CAAU,KAAV,WAAA,EADF,cAAoB,CAApB;AAGA,YAAMM,QAAQ,GAAGC,QAAQ,CACvB,KAAA,QAAA,CAAc,KAAA,IAAA,CAAU,KAAV,WAAA,EADS,QACvB,CADuB,EAAzB,EAAyB,CAAzB;AAKAlC,MAAAA,CAAC,CAADA,cAAAA;AACAA,MAAAA,CAAC,CAADA,eAAAA;;AAEA,UAAI,KAAA,WAAA,KAAJ,GAAA,EAA8B;AAC5B+C,QAAAA,WAAW,GAAG/C,CAAC,CAAf+C,KAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,WAAW,GAAG/C,CAAC,CAAf+C,KAAAA;AAnBU,OAAA,CAAA;;;AAuBZ,UAAIC,OAAO,GACTD,WAAW,GACXvG,KAAK,CAALA,IAAAA,CAAW,KAAA,IAAA,CAAU,KAAV,WAAA,EADXuG,UACAvG,CADAuG,GAEA,KAAA,IAAA,CAAU,KAAV,WAAA,EA1BU,UAuBZ,CAvBY,CAAA;;AA4BZ,UAAIE,QAAQ,GAAGD,OAAO,IAAIpB,SAAS,GAAGrF,SAAS,CA5BnC,IA4BU,CAAtB,CA5BY,CAAA;;AA+BZ,UAAI2G,SAAS,GAAGD,QAAQ,IAAItB,WAAW,GA/B3B,QA+BY,CAAxB,CA/BY,CAAA;;AAkCZ,UAAI,KAAA,WAAA,KAAJ,GAAA,EAA8B;AAC5BuB,QAAAA,SAAS,GACP,KAAA,KAAA,IAAcpH,SAAS,CAATA,aAAAA,GAAd,oBAAA,GACIoH,SAAS,IAAItB,SAAS,GAAGrF,SAAS,CADtC,IACa,CADb,GADF2G,SAAAA;AAID;;AAED,WAAA,gBAAA,CACE,KAAA,IAAA,CAAU,KAAV,WAAA,EADF,gBAAA,IAAA,SAAA;AAxuBiC,KAAA;;AAAA,SAAA,SAAA,GAgvBtBlD,CAAD,IAAO;AACjB,YAAMX,UAAU,GAAGC,kBAAkB,CAAC,KAAtC,EAAqC,CAArC;AACA,YAAMC,QAAQ,GAAGC,gBAAgB,CAAC,KAAlC,EAAiC,CAAjC;AACAQ,MAAAA,CAAC,CAADA,cAAAA;AACAA,MAAAA,CAAC,CAADA,eAAAA;AAEA,WAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAyB,KAAA,UAAA,CAAzB,QAAA;AAEAX,MAAAA,UAAU,CAAVA,mBAAAA,CAAAA,WAAAA,EAA4C,KAA5CA,IAAAA,EAAAA,IAAAA;AACAA,MAAAA,UAAU,CAAVA,mBAAAA,CAAAA,SAAAA,EAA0C,KAA1CA,SAAAA,EAAAA,IAAAA;AACA,WAAA,oBAAA,GAA4B,QAAQ,CAAR,UAAA,CAAoB,MAAM;AACpD;AACA;AACAA,QAAAA,UAAU,CAAVA,mBAAAA,CAAAA,OAAAA,EAAwC,KAAxCA,YAAAA,EAAAA,IAAAA;AACAA,QAAAA,UAAU,CAAVA,mBAAAA,CAAAA,UAAAA,EAA2C,KAA3CA,YAAAA,EAAAA,IAAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AALF,OAA4B,CAA5B;AA1vBiC,KAAA;;AAAA,SAAA,YAAA,GAswBnBW,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAADA,cAAAA;AACAA,MAAAA,CAAC,CAADA,eAAAA;AAxwBiC,KAAA;;AACjC,SAAA,EAAA,GAAA,OAAA;AACA,SAAA,iBAAA,GAAA,EAAA;AACA,SAAA,eAAA,GAAA,GAAA;AACA,SAAA,OAAA,GAAe,EAAE,GAAGlE,SAAS,CAAd,cAAA;AAA+B,SAAGE;AAAlC,KAAf;AACA,SAAA,UAAA,GAAkB;AAChBC,MAAAA,SAAS,EADO,mBAAA;AAEhBC,MAAAA,cAAc,EAFE,2BAAA;AAGhBC,MAAAA,MAAM,EAHU,kBAAA;AAIhBC,MAAAA,IAAI,EAJY,gBAAA;AAKhBC,MAAAA,OAAO,EALS,mBAAA;AAMhBC,MAAAA,WAAW,EANK,uBAAA;AAOhBC,MAAAA,SAAS,EAPO,qBAAA;AAQhBC,MAAAA,KAAK,EARW,iBAAA;AAShBC,MAAAA,2BAA2B,EATX,wCAAA;AAUhBC,MAAAA,oBAAoB,EAVJ,gCAAA;AAWhBC,MAAAA,OAAO,EAXS,mBAAA;AAYhBC,MAAAA,UAAU,EAZM,sBAAA;AAahBC,MAAAA,QAAQ,EAbQ,oBAAA;AAchBC,MAAAA,KAAK,EAdW,iBAAA;AAehBC,MAAAA,QAAQ,EAfQ,oBAAA;AAgBhBC,MAAAA,SAAS,EAhBO,qBAAA;AAiBhBC,MAAAA,UAAU,EAjBM,sBAAA;AAkBhBC,MAAAA,YAAY,EAlBI,yBAAA;AAmBhB,SAAG,KAAA,OAAA,CAAaC;AAnBA,KAAlB;AAqBA,SAAA,IAAA,GAAY;AACVC,MAAAA,CAAC,EAAE;AACDC,QAAAA,gBAAgB,EADf,YAAA;AAEDC,QAAAA,QAAQ,EAFP,OAAA;AAGDC,QAAAA,cAAc,EAHb,aAAA;AAIDC,QAAAA,cAAc,EAJb,aAAA;AAKDC,QAAAA,UAAU,EALT,MAAA;AAMDC,QAAAA,YAAY,EANX,WAAA;AAODC,QAAAA,UAAU,EAPT,CAAA;AAQDC,QAAAA,aAAa,EARZ,IAAA;AASDC,QAAAA,SAAS,EATR,KAAA;AAUDC,QAAAA,YAAY,EAVX,KAAA;AAWDtB,QAAAA,KAAK,EAXJ,EAAA;AAYDD,QAAAA,SAAS,EAAE;AAZV,OADO;AAeVwB,MAAAA,CAAC,EAAE;AACDV,QAAAA,gBAAgB,EADf,WAAA;AAEDC,QAAAA,QAAQ,EAFP,QAAA;AAGDC,QAAAA,cAAc,EAHb,cAAA;AAIDC,QAAAA,cAAc,EAJb,cAAA;AAKDC,QAAAA,UAAU,EALT,KAAA;AAMDC,QAAAA,YAAY,EANX,WAAA;AAODC,QAAAA,UAAU,EAPT,CAAA;AAQDC,QAAAA,aAAa,EARZ,IAAA;AASDC,QAAAA,SAAS,EATR,KAAA;AAUDC,QAAAA,YAAY,EAVX,KAAA;AAWDtB,QAAAA,KAAK,EAXJ,EAAA;AAYDD,QAAAA,SAAS,EAAE;AAZV;AAfO,KAAZ;AA8BA,SAAA,oBAAA,GAAA,IAAA;AACA,SAAA,WAAA,GAAA,KAAA;AACA,SAAA,eAAA,GA1DiC,KA0DjC,CA1DiC,CAAA;;AA6DjC,QAAIT,SAAS,CAATA,SAAAA,CAAAA,GAAAA,CAAwB,KAA5B,EAAIA,CAAJ,EAAsC;AACpC;AACD;;AACD,QAAIE,OAAO,CAAX,UAAA,EAAwB;AACtBgC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,0FAAAA;AAGD;;AAED,QAAIhC,OAAO,CAAX,QAAA,EAAsB;AACpBgC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,wIAAAA;AAGD;;AAED,SAAA,WAAA,GAAmBC,QAAQ,CAAC,KAAD,WAAA,EAA3B,EAA2B,CAA3B;AACA,SAAA,cAAA,GAAsBC,QAAQ,CAAC,KAAD,cAAA,EAAA,EAAA,EAA0B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAA9B;AACA,SAAA,eAAA,GAAuBD,QAAQ,CAAC,KAAD,eAAA,EAAuB,KAAtD,eAA+B,CAA/B;AACA,SAAA,cAAA,GAAsBA,QAAQ,CAAC,KAAD,cAAA,EAAsB,KAApD,eAA8B,CAA9B;AAEApC,IAAAA,SAAS,CAATA,aAAAA,GAA0BsC,OAAO,CAACtC,SAAS,CAA3CA,aAAiC,CAAjCA;AAEA,SAAA,IAAA;AACD;AAED;;;;AAIA;;;;;;;;AAMA,SAAA,aAAA,GAAuB;AACrB,UAAMuC,QAAQ,GAAG3C,QAAQ,CAARA,aAAAA,CAAjB,KAAiBA,CAAjB;AACA2C,IAAAA,QAAQ,CAARA,SAAAA,GAAAA,+DAAAA;AAGA,UAAMC,gBAAgB,GAAGD,QAAQ,CAAjC,iBAAA;AACA,UAAME,UAAU,GAAGD,gBAAgB,CAAnC,iBAAA;AAEA5C,IAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,gBAAAA;AAEA4C,IAAAA,gBAAgB,CAAhBA,UAAAA,GAAAA,CAAAA;AAEA,UAAME,oBAAoB,GAAG1C,SAAS,CAATA,SAAAA,CAA7B,gBAA6BA,CAA7B;AACA,UAAM2C,gBAAgB,GAAG3C,SAAS,CAATA,SAAAA,CAAzB,UAAyBA,CAAzB;AAEAwC,IAAAA,gBAAgB,CAAhBA,UAAAA,GAA8B,CAA9BA,GAAAA;AACA,UAAMI,2BAA2B,GAAG5C,SAAS,CAATA,SAAAA,CAApC,UAAoCA,CAApC;AAEA,WAAO;AACL;AACA6C,MAAAA,oBAAoB,EAAEH,oBAAoB,CAApBA,IAAAA,KAA8BC,gBAAgB,CAF/D,IAAA;AAGL;AACAG,MAAAA,qBAAqB,EACnBH,gBAAgB,CAAhBA,IAAAA,KAA0BC,2BAA2B,CAACG;AALnD,KAAP;AAOD;;AAUD,SAAA,SAAA,CAAA,EAAA,EAAqB;AACnB,UAAMM,IAAI,GAAGC,EAAE,CAAf,qBAAaA,EAAb;AACA,UAAMC,UAAU,GAAGC,kBAAkB,CAArC,EAAqC,CAArC;AACA,UAAMC,QAAQ,GAAGC,gBAAgB,CAAjC,EAAiC,CAAjC;AAEA,WAAO;AACLC,MAAAA,GAAG,EACDN,IAAI,CAAJA,GAAAA,IACCI,QAAQ,CAARA,WAAAA,IAAwBF,UAAU,CAAVA,eAAAA,CAHtB,SAEHF,CAFG;AAILN,MAAAA,IAAI,EACFM,IAAI,CAAJA,IAAAA,IACCI,QAAQ,CAARA,WAAAA,IAAwBF,UAAU,CAAVA,eAAAA,CADzBF,UAAAA;AALG,KAAP;AAQD;;AAIDQ,EAAAA,IAAI,GAAG;AACL;AACA7D,IAAAA,SAAS,CAATA,SAAAA,CAAAA,GAAAA,CAAwB,KAAxBA,EAAAA,EAFK,IAELA,EAFK,CAAA;;AAKL,QAAA,SAAA,EAAe;AACb,WAAA,OAAA;AAEA,WAAA,cAAA,GAAsB,KAAtB,iBAAsB,EAAtB;AAEA,WAAA,WAAA;AAEA,WAAA,aAAA;AACD;AACF;;AAED8D,EAAAA,OAAO,GAAG;AACR;AACA,QACEC,KAAK,CAALA,SAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAA4B,KAAA,EAAA,CAA5BA,QAAAA,EAA+CC,KAAD,IAC5CA,KAAK,CAALA,SAAAA,CAAAA,QAAAA,CAAyB,KAAA,UAAA,CAD3BD,OACEC,CADFD,EADF,MAAA,EAIE;AACA;AACA,WAAA,SAAA,GAAiB,KAAA,EAAA,CAAA,aAAA,CAAuB,IAAG,KAAA,UAAA,CAAgBxD,OAA3D,EAAiB,CAAjB;AACA,WAAA,gBAAA,GACE,KAAA,OAAA,CAAA,cAAA,IACA,KAAA,EAAA,CAAA,aAAA,CAAuB,IAAG,KAAA,UAAA,CAAgBH,cAF5C,EAEE,CAFF;AAGA,WAAA,SAAA,GACE,KAAA,OAAA,CAAA,WAAA,IACA,KAAA,EAAA,CAAA,aAAA,CAAuB,IAAG,KAAA,UAAA,CAAgBD,SAF5C,EAEE,CAFF;AAIA,WAAA,QAAA,GAAgB,KAAA,EAAA,CAAA,aAAA,CAAuB,IAAG,KAAA,UAAA,CAAgBE,MAA1D,EAAgB,CAAhB;AACA,WAAA,MAAA,GAAc,KAAA,EAAA,CAAA,aAAA,CAAuB,IAAG,KAAA,UAAA,CAAgBC,IAAxD,EAAc,CAAd;AAEA,WAAA,aAAA,GAAqB,KAAA,SAAA,CACnB,KADmB,SAAA,EAElB,IAAG,KAAA,UAAA,CAAgBE,WAFtB,EAAqB,CAArB;AAIA,WAAA,2BAAA,GAAmC,KAAA,EAAA,CAAA,aAAA,CAChC,IAAG,KAAA,UAAA,CAAgBG,2BADtB,EAAmC,CAAnC;AAGA,WAAA,oBAAA,GAA4B,KAAA,EAAA,CAAA,aAAA,CACzB,IAAG,KAAA,UAAA,CAAgBC,oBADtB,EAA4B,CAA5B;AAGA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,GAAuB,KAAA,SAAA,CACrB,KADqB,EAAA,EAEpB,IAAG,KAAA,UAAA,CAAgBF,KAAM,IAAG,KAAA,UAAA,CAAgBI,UAF/C,EAAuB,CAAvB;AAIA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,GAAuB,KAAA,SAAA,CACrB,KADqB,EAAA,EAEpB,IAAG,KAAA,UAAA,CAAgBJ,KAAM,IAAG,KAAA,UAAA,CAAgBK,QAF/C,EAAuB,CAAvB;AA/BF,KAAA,MAmCO;AACL;AACA,WAAA,SAAA,GAAiBnB,QAAQ,CAARA,aAAAA,CAAjB,KAAiBA,CAAjB;AACA,WAAA,gBAAA,GAAwBA,QAAQ,CAARA,aAAAA,CAAxB,KAAwBA,CAAxB;AACA,WAAA,QAAA,GAAgBA,QAAQ,CAARA,aAAAA,CAAhB,KAAgBA,CAAhB;AACA,WAAA,MAAA,GAAcA,QAAQ,CAARA,aAAAA,CAAd,KAAcA,CAAd;AACA,WAAA,SAAA,GAAiBA,QAAQ,CAARA,aAAAA,CAAjB,KAAiBA,CAAjB;AACA,WAAA,aAAA,GAAqBA,QAAQ,CAARA,aAAAA,CAArB,KAAqBA,CAArB;AACA,WAAA,2BAAA,GAAmCA,QAAQ,CAARA,aAAAA,CAAnC,KAAmCA,CAAnC;AACA,WAAA,oBAAA,GAA4BA,QAAQ,CAARA,aAAAA,CAA5B,KAA4BA,CAA5B;AAEA,WAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAA6B,KAAA,UAAA,CAA7B,OAAA;AACA,WAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAoC,KAAA,UAAA,CAApC,cAAA;AACA,WAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAA4B,KAAA,UAAA,CAA5B,MAAA;AACA,WAAA,MAAA,CAAA,SAAA,CAAA,GAAA,CAA0B,KAAA,UAAA,CAA1B,IAAA;AACA,WAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAA6B,KAAA,UAAA,CAA7B,SAAA;AACA,WAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAiC,KAAA,UAAA,CAAjC,WAAA;AACA,WAAA,2BAAA,CAAA,SAAA,CAAA,GAAA,CACE,KAAA,UAAA,CADF,2BAAA;AAGA,WAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,CACE,KAAA,UAAA,CADF,oBAAA;;AAIA,aAAO,KAAA,EAAA,CAAP,UAAA,EAA2B;AACzB,aAAA,SAAA,CAAA,WAAA,CAA2B,KAAA,EAAA,CAA3B,UAAA;AACD;;AAED,WAAA,gBAAA,CAAA,WAAA,CAAkC,KAAlC,SAAA;AACA,WAAA,QAAA,CAAA,WAAA,CAA0B,KAA1B,gBAAA;AACA,WAAA,MAAA,CAAA,WAAA,CAAwB,KAAxB,QAAA;AACA,WAAA,2BAAA,CAAA,WAAA,CAA6C,KAA7C,oBAAA;AACA,WAAA,SAAA,CAAA,WAAA,CAA2B,KAA3B,2BAAA;AACA,WAAA,SAAA,CAAA,WAAA,CAA2B,KAA3B,MAAA;AACA,WAAA,SAAA,CAAA,WAAA,CAA2B,KAA3B,aAAA;AACA,WAAA,EAAA,CAAA,WAAA,CAAoB,KAApB,SAAA;AACD;;AAED,QAAI,CAAC,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAD,EAAA,IAAyB,CAAC,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAA9B,EAAA,EAAoD;AAClD,YAAMc,KAAK,GAAGd,QAAQ,CAARA,aAAAA,CAAd,KAAcA,CAAd;AACA,YAAMa,SAAS,GAAGb,QAAQ,CAARA,aAAAA,CAAlB,KAAkBA,CAAlB;AAEAc,MAAAA,KAAK,CAALA,SAAAA,CAAAA,GAAAA,CAAoB,KAAA,UAAA,CAApBA,KAAAA;AACAD,MAAAA,SAAS,CAATA,SAAAA,CAAAA,GAAAA,CAAwB,KAAA,UAAA,CAAxBA,SAAAA;AAEAC,MAAAA,KAAK,CAALA,WAAAA,CAAAA,SAAAA;AAEA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,GAAuBA,KAAK,CAALA,SAAAA,CAAvB,IAAuBA,CAAvB;AACA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAmC,KAAA,UAAA,CAAnC,UAAA;AAEA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,GAAuBA,KAAK,CAALA,SAAAA,CAAvB,IAAuBA,CAAvB;AACA,WAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAmC,KAAA,UAAA,CAAnC,QAAA;AAEA,WAAA,EAAA,CAAA,WAAA,CAAoB,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAApB,EAAA;AACA,WAAA,EAAA,CAAA,WAAA,CAAoB,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAApB,EAAA;AACD;;AAED,SAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,GAA2B,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,CAAA,aAAA,CACxB,IAAG,KAAA,UAAA,CAAgBD,SADtB,EAA2B,CAA3B;AAGA,SAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,GAA2B,KAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,CAAA,aAAA,CACxB,IAAG,KAAA,UAAA,CAAgBA,SADtB,EAA2B,CAA3B;;AAIA,QAAI,CAAC,KAAA,OAAA,CAAL,QAAA,EAA4B;AAC1B,WAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAuC,KAAA,UAAA,CAAvC,OAAA;AACA,WAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAuC,KAAA,UAAA,CAAvC,OAAA;AACD;;AAED,SAAA,EAAA,CAAA,YAAA,CAAA,gBAAA,EAAA,MAAA;AACD;;AAEDwD,EAAAA,aAAa,GAAG;AACd,UAAMR,QAAQ,GAAGC,gBAAgB,CAAC,KADpB,EACmB,CAAjC,CADc,CAAA;;AAId,SAAA,EAAA,CAAA,gBAAA,CAAA,YAAA,EAAuC,KAAvC,YAAA;AAEA,KAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,CAA4CQ,CAAD,IAAO;AAChD,WAAA,EAAA,CAAA,gBAAA,CAAA,CAAA,EAA4B,KAA5B,cAAA,EAAA,IAAA;AADF,KAAA;AAIA,KAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,CAAiDA,CAAD,IAAO;AACrD,WAAA,EAAA,CAAA,gBAAA,CAAA,CAAA,EAA4B,KAA5B,cAAA,EAAiD;AAC/CC,QAAAA,OAAO,EADwC,IAAA;AAE/CC,QAAAA,OAAO,EAAE;AAFsC,OAAjD;AADF,KAAA;AAOA,SAAA,EAAA,CAAA,gBAAA,CAAA,WAAA,EAAsC,KAAtC,WAAA;AACA,SAAA,EAAA,CAAA,gBAAA,CAAA,YAAA,EAAuC,KAAvC,YAAA;AAEA,SAAA,gBAAA,CAAA,gBAAA,CAAA,QAAA,EAAiD,KApBnC,QAoBd,EApBc,CAAA;;AAuBdX,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,QAAAA,EAAoC,KAApCA,cAAAA;;AAEA,QAAI/D,MAAM,CAAV,cAAA,EAA2B;AACzB;AACA,UAAI2E,qBAAqB,GAAzB,KAAA;AACA,YAAMC,cAAc,GAAGb,QAAQ,CAARA,cAAAA,IAAvB,cAAA;AACA,WAAA,cAAA,GAAsB,IAAA,cAAA,CAAmB,MAAM;AAC7C,YAAI,CAAJ,qBAAA,EAA4B;AAE5BA,QAAAA,QAAQ,CAARA,qBAAAA,CAA+B,MAAM;AACnC,eAAA,WAAA;AADFA,SAAAA;AAHF,OAAsB,CAAtB;AAQA,WAAA,cAAA,CAAA,OAAA,CAA4B,KAA5B,EAAA;AACA,WAAA,cAAA,CAAA,OAAA,CAA4B,KAA5B,SAAA;AAEAA,MAAAA,QAAQ,CAARA,qBAAAA,CAA+B,MAAM;AACnCY,QAAAA,qBAAqB,GAArBA,IAAAA;AADFZ,OAAAA;AAxCY,KAAA,CAAA;;;AA8Cd,SAAA,gBAAA,GAAwB,IAAIA,QAAQ,CAAZ,gBAAA,CAA8B,MAAM;AAC1DA,MAAAA,QAAQ,CAARA,qBAAAA,CAA+B,MAAM;AACnC,aAAA,WAAA;AADFA,OAAAA;AADF,KAAwB,CAAxB;AAMA,SAAA,gBAAA,CAAA,OAAA,CAA8B,KAA9B,SAAA,EAA8C;AAC5Cc,MAAAA,SAAS,EADmC,IAAA;AAE5CC,MAAAA,OAAO,EAFqC,IAAA;AAG5CC,MAAAA,aAAa,EAAE;AAH6B,KAA9C;AAKD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,UAAMjB,QAAQ,GAAGC,gBAAgB,CAAC,KAAlC,EAAiC,CAAjC;AACA,SAAA,QAAA,GAAgBD,QAAQ,CAARA,gBAAAA,CAA0B,KAA1C,EAAgBA,CAAhB;AACA,SAAA,KAAA,GAAa,KAAA,QAAA,CAAA,SAAA,KAAb,KAAA;AAEA,UAAMkB,oBAAoB,GAAG,KAAA,SAAA,CAA7B,WAAA;AAEA,UAAMC,YAAY,GAAG,KAAA,oBAAA,CAAA,YAAA,IAArB,CAAA;AACA,UAAMC,WAAW,GACf,KAAA,oBAAA,CAAA,WAAA,IAAA,CAAA,IAA8CF,oBAAoB,GADpE,CAAA;AAGA,UAAMG,2BAA2B,GAAG,KAAA,gBAAA,CAApC,WAAA;AAEA,UAAMC,WAAW,GAAG,KAAA,QAAA,CAApB,SAAA;AACA,UAAMC,WAAW,GAAG,KAAA,QAAA,CAApB,SAAA;AAEA,SAAA,SAAA,CAAA,KAAA,CAAA,OAAA,GAAgC,GAAE,KAAA,QAAA,CAAcC,UAAW,IAAG,KAAA,QAAA,CAAcC,YAAa,IAAG,KAAA,QAAA,CAAcC,aAAc,IAAG,KAAA,QAAA,CAAcC,WAAzI,EAAA;AACA,SAAA,SAAA,CAAA,KAAA,CAAA,MAAA,GAA+B,IAAG,KAAA,QAAA,CAAcH,UAAW,KAAI,KAAA,QAAA,CAAcC,YAAa,KAAI,KAAA,QAAA,CAAcC,aAAc,KAAI,KAAA,QAAA,CAAcC,WAA5I,EAAA;AAEA,UAAMC,qBAAqB,GAAG,KAAA,SAAA,CAA9B,YAAA;AACA,UAAMC,oBAAoB,GAAG,KAAA,SAAA,CAA7B,WAAA;AAEA,SAAA,gBAAA,CAAA,KAAA,CAAA,MAAA,GAAqCV,YAAY,GAAA,MAAA,GAtBrC,MAsBZ,CAtBY,CAAA;;AAyBZ,SAAA,aAAA,CAAA,KAAA,CAAA,KAAA,GAAiCC,WAAW,GACvC,GAAEF,oBAAoB,IAAIW,oBADa,IAAA,GAA5C,MAAA;AAGA,SAAA,aAAA,CAAA,KAAA,CAAA,MAAA,GAAmC,GAAED,qBAArC,IAAA;AAEA,UAAME,4BAA4B,GAAG,KAAA,gBAAA,CAArC,YAAA;AAEA,SAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACEZ,oBAAoB,KAApBA,CAAAA,IAA8BW,oBAAoB,GADpD,oBAAA;AAEA,SAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACED,qBAAqB,GAnCX,4BAkCZ,CAlCY,CAAA;;AAsCZ,SAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACEN,WAAW,KAAXA,QAAAA,GAAAA,KAAAA,GAAmC,KAAA,IAAA,CAAA,CAAA,CADrC,aAAA;AAEA,SAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACEC,WAAW,KAAXA,QAAAA,GAAAA,KAAAA,GAAmC,KAAA,IAAA,CAAA,CAAA,CADrC,aAAA;AAGA,SAAA,IAAA,CAAA,CAAA,CAAA,YAAA,GACE,KAAA,OAAA,CAAA,YAAA,KAAA,GAAA,IAAqC,KAAA,OAAA,CAAA,YAAA,KADvC,IAAA;AAEA,SAAA,IAAA,CAAA,CAAA,CAAA,YAAA,GACE,KAAA,OAAA,CAAA,YAAA,KAAA,GAAA,IAAqC,KAAA,OAAA,CAAA,YAAA,KADvC,IAAA;AAGA,SAhDY,mBAgDZ,GAhDY,CAAA;;AAmDZ,QAAIQ,mBAAmB,GAAG,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACtB,KADsB,cAAA,GAA1B,CAAA;AAGA,QAAIC,mBAAmB,GAAG,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACtB,KADsB,cAAA,GAA1B,CAAA;AAIA,SAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACE,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IACAH,oBAAoB,GAAGR,2BAA2B,GAFpD,mBAAA;AAGA,SAAA,IAAA,CAAA,CAAA,CAAA,aAAA,GACE,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IACAO,qBAAqB,GACnBE,4BAA4B,GAHhC,mBAAA;AAKA,SAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,IAAA,GAA6B,KAAA,gBAAA,CAA7B,GAA6B,CAA7B;AACA,SAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,IAAA,GAA6B,KAAA,gBAAA,CAA7B,GAA6B,CAA7B;AAEA,SAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA,KAAA,CAAA,KAAA,GAAwC,GAAE,KAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAsBG,IAAhE,IAAA;AACA,SAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA,KAAA,CAAA,MAAA,GAAyC,GAAE,KAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAsBA,IAAjE,IAAA;AAEA,SAAA,iBAAA,CAAA,GAAA;AACA,SAAA,iBAAA,CAAA,GAAA;AAEA,SAAA,qBAAA,CAAA,GAAA;AACA,SAAA,qBAAA,CAAA,GAAA;AACD;AAED;;;;;AAGAC,EAAAA,gBAAgB,CAACC,IAAI,GAAL,GAAA,EAAa;AAC3B,QAAI,CAAC,KAAA,IAAA,CAAA,IAAA,EAAL,aAAA,EAAoC;AAClC,aAAA,CAAA;AACD;;AAED,UAAMC,WAAW,GAAG,KAAA,SAAA,CAAe,KAAA,IAAA,CAAA,IAAA,EAAnC,cAAoB,CAApB;AACA,UAAMC,SAAS,GAAG,KAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAAyB,KAAA,IAAA,CAAA,IAAA,EAA3C,cAAkB,CAAlB;AACA,QAAA,aAAA;AAEA,QAAIC,cAAc,GAAGD,SAAS,GATH,WAS3B,CAT2B,CAAA;;AAY3BE,IAAAA,aAAa,GAAGC,IAAI,CAAJA,GAAAA,CACd,CAAC,EAAEF,cAAc,GADHE,SACb,CADaA,EAEd,KAAA,OAAA,CAFFD,gBAAgBC,CAAhBD;;AAKA,QAAI,KAAA,OAAA,CAAJ,gBAAA,EAAmC;AACjCA,MAAAA,aAAa,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,aAAAA,EAAwB,KAAA,OAAA,CAAxCD,gBAAgBC,CAAhBD;AACD;;AAED,WAAA,aAAA;AACD;;AAEDE,EAAAA,iBAAiB,CAACN,IAAI,GAAL,GAAA,EAAa;AAC5B,QAAI,CAAC,KAAA,IAAA,CAAA,IAAA,EAAL,aAAA,EAAoC;AAClC;AACD;;AAED,UAAMC,WAAW,GAAG,KAAA,gBAAA,CAAsB,KAAA,IAAA,CAAA,IAAA,EAA1C,cAAoB,CAApB;AACA,UAAMC,SAAS,GAAG,KAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAAyB,KAAA,IAAA,CAAA,IAAA,EAA3C,cAAkB,CAAlB;AACA,UAAMK,QAAQ,GAAGC,QAAQ,CAAC,KAAA,QAAA,CAAc,KAAA,IAAA,CAAA,IAAA,EAAf,QAAC,CAAD,EAAzB,EAAyB,CAAzB;AACA,UAAM3F,SAAS,GAAG,KAAA,IAAA,CAAA,IAAA,EAAlB,SAAA;AAEA,QAAI4F,YAAY,GAAG,KAAA,gBAAA,CAAsB,KAAA,IAAA,CAAA,IAAA,EAAzC,gBAAmB,CAAnB;AAEAA,IAAAA,YAAY,GACVT,IAAI,KAAJA,GAAAA,IACA,KADAA,KAAAA,IAEA5F,SAAS,CAATA,aAAAA,GAFA4F,oBAAAA,GAGI,CAHJA,YAAAA,GADFS,YAAAA;AAMA,QAAIC,cAAc,GAAGD,YAAY,IAAIR,WAAW,GAAhD,QAAiC,CAAjC;AACA,QAAIU,YAAY,GAAG,CAAC,EAAE,CAACT,SAAS,GAAGrF,SAAS,CAAtB,IAAA,IAAtB,cAAoB,CAApB;AACA8F,IAAAA,YAAY,GACVX,IAAI,KAAJA,GAAAA,IACA,KADAA,KAAAA,IAEA5F,SAAS,CAATA,aAAAA,GAFA4F,qBAAAA,GAGI,CAAA,YAAA,IAAiBE,SAAS,GAAGrF,SAAS,CAH1CmF,IAGI,CAHJA,GADFW,YAAAA;AAOA9F,IAAAA,SAAS,CAATA,EAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GACEmF,IAAI,KAAJA,GAAAA,GACK,eAAcW,YADnBX,WAAAA,GAEK,kBAAiBW,YAHxB9F,QAAAA;AAID;;AAED+F,EAAAA,qBAAqB,CAACZ,IAAI,GAAL,GAAA,EAAa;AAChC,UAAMlF,KAAK,GAAG,KAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAd,EAAA;AACA,UAAMD,SAAS,GAAG,KAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAlB,EAAA;;AAEA,QAAI,KAAA,IAAA,CAAA,IAAA,EAAA,aAAA,IAAiC,KAAA,IAAA,CAAA,IAAA,EAArC,YAAA,EAAmE;AACjEC,MAAAA,KAAK,CAALA,KAAAA,CAAAA,UAAAA,GAAAA,SAAAA;AACA,WAAA,gBAAA,CAAA,KAAA,CAA4B,KAAA,IAAA,CAAA,IAAA,EAA5B,YAAA,IAAA,QAAA;AACA,WAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAuB,GAAE,KAAA,UAAA,CAAgBS,UAAW,IAAGyE,IAAvD,EAAA;AAHF,KAAA,MAIO;AACLlF,MAAAA,KAAK,CAALA,KAAAA,CAAAA,UAAAA,GAAAA,QAAAA;AACA,WAAA,gBAAA,CAAA,KAAA,CAA4B,KAAA,IAAA,CAAA,IAAA,EAA5B,YAAA,IAAA,QAAA;AACA,WAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAA0B,GAAE,KAAA,UAAA,CAAgBS,UAAW,IAAGyE,IAA1D,EAAA;AAX8B,KAAA,CAAA;;;AAehC,QAAI,KAAA,IAAA,CAAA,IAAA,EAAJ,aAAA,EAAmC;AACjCnF,MAAAA,SAAS,CAATA,KAAAA,CAAAA,OAAAA,GAAAA,OAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,SAAS,CAATA,KAAAA,CAAAA,OAAAA,GAAAA,MAAAA;AACD;AACF;;AAEDgG,EAAAA,mBAAmB,GAAG;AACpB,SAAA,QAAA,CAAA,KAAA,CAAoB,KAAA,KAAA,GAAA,MAAA,GAApB,OAAA,IACE,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAA7B,YAAA,GACK,IAAG,KAAKC,cADb,IAAA,GADF,CAAA;AAIA,SAAA,QAAA,CAAA,KAAA,CAAA,MAAA,GACE,KAAA,IAAA,CAAA,CAAA,CAAA,aAAA,IAA6B,KAAA,IAAA,CAAA,CAAA,CAA7B,YAAA,GACK,IAAG,KAAKA,cADb,IAAA,GADF,CAAA;AAID;AAED;;;;;AAuEAC,EAAAA,kBAAkB,CAACf,IAAI,GAAL,GAAA,EAAa;AAC7B,SAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,IAAA,GAA6B,KAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAA7B,qBAA6B,EAA7B;AAGA,SAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,GAAiC,KAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,EAAA,CAAjC,qBAAiC,EAAjC;AAIA,UAAMgB,wBAAwB,GAAG,KAAA,cAAA,CAC/B,KAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CADF,IAAiC,CAAjC;;AAIA,QAAA,wBAAA,EAA8B;AAC5B,WAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAA2C,KAAA,UAAA,CAA3C,KAAA;AADF,KAAA,MAEO;AACL,WAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAA8C,KAAA,UAAA,CAA9C,KAAA;AACD;;AAED,QAAI,KAAA,cAAA,CAAoB,KAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAxB,IAAI,CAAJ,EAAqD;AACnD,WAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAuC,KAAA,UAAA,CAAvC,KAAA;AADF,KAAA,MAEO;AACL,WAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAA0C,KAAA,UAAA,CAA1C,KAAA;AACD;AACF;;AAiBDC,EAAAA,mBAAmB,CAACjB,IAAI,GAAL,GAAA,EAAa;AAC9B,SAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAA0C,KAAA,UAAA,CAA1C,KAAA;AACA,SAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAA8C,KAAA,UAAA,CAA9C,KAAA;AACD;AAuDD;;;;;AAGAoB,EAAAA,WAAW,CAAA,CAAA,EAAIpB,IAAI,GAAR,GAAA,EAAgB;AACzB,UAAMrC,UAAU,GAAGC,kBAAkB,CAAC,KAAtC,EAAqC,CAArC;AACA,UAAMC,QAAQ,GAAGC,gBAAgB,CAAC,KAAlC,EAAiC,CAAjC;AACA,UAAMjD,SAAS,GAAG,KAAA,IAAA,CAAA,IAAA,EAHO,SAGzB,CAHyB,CAAA;;AAMzB,UAAMwG,WAAW,GAAGrB,IAAI,KAAJA,GAAAA,GAAe1B,CAAC,CAAhB0B,KAAAA,GAAyB1B,CAAC,CAA9C,KAAA;AACA,SAAA,IAAA,CAAA,IAAA,EAAA,UAAA,GACE+C,WAAW,GAAGxG,SAAS,CAATA,IAAAA,CAAe,KAAA,IAAA,CAAA,IAAA,EAD/B,UACgBA,CADhB;AAEA,SAAA,WAAA,GAAA,IAAA;AAEA,SAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAsB,KAAA,UAAA,CAAtB,QAAA;AAEA8C,IAAAA,UAAU,CAAVA,gBAAAA,CAAAA,WAAAA,EAAyC,KAAzCA,IAAAA,EAAAA,IAAAA;AACAA,IAAAA,UAAU,CAAVA,gBAAAA,CAAAA,SAAAA,EAAuC,KAAvCA,SAAAA,EAAAA,IAAAA;;AACA,QAAI,KAAA,oBAAA,KAAJ,IAAA,EAAwC;AACtCA,MAAAA,UAAU,CAAVA,gBAAAA,CAAAA,OAAAA,EAAqC,KAArCA,YAAAA,EAAAA,IAAAA;AACAA,MAAAA,UAAU,CAAVA,gBAAAA,CAAAA,UAAAA,EAAwC,KAAxCA,YAAAA,EAAAA,IAAAA;AAFF,KAAA,MAGO;AACLE,MAAAA,QAAQ,CAARA,YAAAA,CAAsB,KAAtBA,oBAAAA;AACA,WAAA,oBAAA,GAAA,IAAA;AACD;AACF;AAED;;;;;AA+EA4D,EAAAA,YAAY,CAAA,CAAA,EAAIzB,IAAI,GAAR,GAAA,EAAgB;AAC1B,QAAI,CAAC,KAAA,OAAA,CAAL,YAAA,EAAgC;AAEhC,UAAMnC,QAAQ,GAAGC,gBAAgB,CAAC,KAAlC,EAAiC,CAAjC;AACA,SAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,GAAiC,KAAA,IAAA,CAAA,IAAA,EAAA,SAAA,CAAA,EAAA,CAAjC,qBAAiC,EAAjC;AAGA,UAAMjD,SAAS,GAAG,KAAA,IAAA,CAAA,IAAA,EAAlB,SAAA;AACA,UAAM6G,eAAe,GAAG7G,SAAS,CAATA,IAAAA,CAAe,KAAA,IAAA,CAAA,IAAA,EAAvC,UAAwBA,CAAxB;AACA,UAAM0F,QAAQ,GAAGC,QAAQ,CAAC,KAAA,QAAA,CAAc,KAAA,IAAA,CAAA,IAAA,EAAf,QAAC,CAAD,EAAzB,EAAyB,CAAzB;AACA,QAAImB,QAAQ,GAAG,KAAA,gBAAA,CAAsB,KAAA,IAAA,CAAA,IAAA,EAArC,gBAAe,CAAf;AACA,UAAMC,CAAC,GACL5B,IAAI,KAAJA,GAAAA,GACI,KAAA,MAAA,GADJA,eAAAA,GAEI,KAAA,MAAA,GAHN,eAAA;AAIA,UAAM6B,GAAG,GAAGD,CAAC,GAADA,CAAAA,GAAQ,CAARA,CAAAA,GAAZ,CAAA;AACA,UAAME,UAAU,GAAGD,GAAG,KAAK,CAARA,CAAAA,GAAaF,QAAQ,GAArBE,QAAAA,GAAmCF,QAAQ,GAA9D,QAAA;AACA,UAAMI,KAAK,GAAX,EAAA;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAIH,GAAG,KAAK,CAAZ,CAAA,EAAgB;AACd,YAAIF,QAAQ,GAAZ,UAAA,EAA2B;AACzBA,UAAAA,QAAQ,IAARA,KAAAA;AACD;AAHH,OAAA,MAIO;AACL,YAAIA,QAAQ,GAAZ,UAAA,EAA2B;AACzBA,UAAAA,QAAQ,IAARA,KAAAA;AACD;AACF;;AAED,WAAA,gBAAA,CAAsB,KAAA,IAAA,CAAA,IAAA,EAAtB,gBAAA,IAAA,QAAA;AACA9D,MAAAA,QAAQ,CAARA,qBAAAA,CAAAA,QAAAA;AAZF,KAAA;;AAeAmE,IAAAA,QAAQ;AACT;AAED;;;;;AAGAC,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAP,SAAA;AACD;AAED;;;;;AAGAC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAP,gBAAA;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAI;AACF;AACA,UACEC,gBAAgB,CAAC,KAAD,gBAAA,EAAhBA,qBAAgB,CAAhBA,CAAAA,OAAAA,KAAAA,MAAAA,IAEA,oBAAoBpI,QAAQ,CAARA,eAAAA,CAFpBoI,KAAAA,IAGA,wBAAwBpI,QAAQ,CAARA,eAAAA,CAJ1B,KAAA,EAKE;AACA,eAAA,CAAA;AANF,OAAA,MAOO;AACL,eAAO8G,cAAP,EAAA;AACD;AAXH,KAAA,CAYE,OAAA,CAAA,EAAU;AACV,aAAOA,cAAP,EAAA;AACD;AACF;;AAEDuB,EAAAA,eAAe,GAAG;AAChB,UAAMxE,QAAQ,GAAGC,gBAAgB,CAAC,KADlB,EACiB,CAAjC,CADgB,CAAA;;AAGhB,SAAA,EAAA,CAAA,mBAAA,CAAA,YAAA,EAA0C,KAA1C,YAAA;AAEA,KAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,CAA4CQ,CAAD,IAAO;AAChD,WAAA,EAAA,CAAA,mBAAA,CAAA,CAAA,EAA+B,KAA/B,cAAA,EAAA,IAAA;AADF,KAAA;AAIA,KAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,CAAiDA,CAAD,IAAO;AACrD,WAAA,EAAA,CAAA,mBAAA,CAAA,CAAA,EAA+B,KAA/B,cAAA,EAAoD;AAClDC,QAAAA,OAAO,EAD2C,IAAA;AAElDC,QAAAA,OAAO,EAAE;AAFyC,OAApD;AADF,KAAA;AAOA,SAAA,EAAA,CAAA,mBAAA,CAAA,WAAA,EAAyC,KAAzC,WAAA;AACA,SAAA,EAAA,CAAA,mBAAA,CAAA,YAAA,EAA0C,KAA1C,YAAA;AAEA,SAAA,gBAAA,CAAA,mBAAA,CAAA,QAAA,EAAoD,KAApD,QAAA;AACAX,IAAAA,QAAQ,CAARA,mBAAAA,CAAAA,QAAAA,EAAuC,KAAvCA,cAAAA;AAEA,SAAA,gBAAA,CAAA,UAAA;;AAEA,QAAI,KAAJ,cAAA,EAAyB;AACvB,WAAA,cAAA,CAAA,UAAA;AAzBc,KAAA,CAAA;;;AA6BhB,SAAA,WAAA,CAAA,MAAA;AACA,SAAA,cAAA,CAAA,MAAA;AACA,SAAA,eAAA,CAAA,MAAA;AACA,SAAA,cAAA,CAAA,MAAA;AACD;AAED;;;;;AAGAyE,EAAAA,OAAO,GAAG;AACR,SAAA,eAAA;AACAlI,IAAAA,SAAS,CAATA,SAAAA,CAAAA,MAAAA,CAA2B,KAA3BA,EAAAA;AACD;AAED;;;;;AAGAmI,EAAAA,cAAc,CAAA,IAAA,EAAO;AACnB,WACE,KAAA,MAAA,IAAeC,IAAI,CAAnB,IAAA,IACA,KAAA,MAAA,IAAeA,IAAI,CAAJA,IAAAA,GAAYA,IAAI,CAD/B,KAAA,IAEA,KAAA,MAAA,IAAeA,IAAI,CAFnB,GAAA,IAGA,KAAA,MAAA,IAAeA,IAAI,CAAJA,GAAAA,GAAWA,IAAI,CAJhC,MAAA;AAMD;AAED;;;;;AAGAC,EAAAA,SAAS,CAAA,EAAA,EAAA,KAAA,EAAY;AACnB,UAAMC,OAAO,GACXhF,EAAE,CAAFA,OAAAA,IACAA,EAAE,CADFA,qBAAAA,IAEAA,EAAE,CAFFA,kBAAAA,IAGAA,EAAE,CAJJ,iBAAA;AAKA,WAAOS,KAAK,CAALA,SAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAA4BT,EAAE,CAA9BS,QAAAA,EAA0CC,KAAD,IAC9CsE,OAAO,CAAPA,IAAAA,CAAAA,KAAAA,EADKvE,KACLuE,CADKvE,EAAP,CAAOA,CAAP;AAGD;;AAr5B4B;;AAAV/D,SAAAA,CA4HZgD,cA5HYhD,GA4HK;AACtBiD,EAAAA,QAAQ,EADc,IAAA;AAEtBjB,EAAAA,YAAY,EAFU,KAAA;AAGtBkB,EAAAA,YAAY,EAHU,IAAA;AAItBC,EAAAA,gBAAgB,EAJM,EAAA;AAKtBC,EAAAA,gBAAgB,EAAE;AALI,CA5HLpD;AAAAA,SAAAA,CAmJZ4D,SAnJY5D,GAmJA,IAAA,OAAA,EAnJAA","sourcesContent":["import canUseDOM from 'can-use-dom';\n\nlet cachedScrollbarWidth = null;\nlet cachedDevicePixelRatio = null;\n\nif (canUseDOM) {\n  window.addEventListener('resize', () => {\n    if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n      cachedDevicePixelRatio = window.devicePixelRatio;\n      cachedScrollbarWidth = null;\n    }\n  });\n}\n\nexport default function scrollbarWidth() {\n  if (cachedScrollbarWidth === null) {\n    if (typeof document === 'undefined') {\n      cachedScrollbarWidth = 0;\n      return cachedScrollbarWidth;\n    }\n\n    const body = document.body;\n    const box = document.createElement('div');\n\n    box.classList.add('simplebar-hide-scrollbar');\n\n    body.appendChild(box);\n\n    const width = box.getBoundingClientRect().right;\n\n    body.removeChild(box);\n\n    cachedScrollbarWidth = width;\n  }\n\n  return cachedScrollbarWidth;\n}\n","export function getElementWindow(element) {\n  if (\n    !element ||\n    !element.ownerDocument ||\n    !element.ownerDocument.defaultView\n  ) {\n    return window;\n  }\n  return element.ownerDocument.defaultView;\n}\n\nexport function getElementDocument(element) {\n  if (!element || !element.ownerDocument) {\n    return document;\n  }\n  return element.ownerDocument;\n}\n","import { throttle, debounce, memoize } from 'lodash-es';\nimport canUseDOM from 'can-use-dom';\nimport scrollbarWidth from './scrollbar-width';\nimport { getElementWindow, getElementDocument } from './helpers';\n\nexport default class SimpleBar {\n  constructor(element, options = {}) {\n    this.el = element;\n    this.minScrollbarWidth = 20;\n    this.stopScrollDelay = 175;\n    this.options = { ...SimpleBar.defaultOptions, ...options };\n    this.classNames = {\n      contentEl: 'simplebar-content',\n      contentWrapper: 'simplebar-content-wrapper',\n      offset: 'simplebar-offset',\n      mask: 'simplebar-mask',\n      wrapper: 'simplebar-wrapper',\n      placeholder: 'simplebar-placeholder',\n      scrollbar: 'simplebar-scrollbar',\n      track: 'simplebar-track',\n      heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n      heightAutoObserverEl: 'simplebar-height-auto-observer',\n      visible: 'simplebar-visible',\n      horizontal: 'simplebar-horizontal',\n      vertical: 'simplebar-vertical',\n      hover: 'simplebar-hover',\n      dragging: 'simplebar-dragging',\n      scrolling: 'simplebar-scrolling',\n      scrollable: 'simplebar-scrollable',\n      mouseEntered: 'simplebar-mouse-entered',\n      ...this.options.classNames,\n    };\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetSizeAttr: 'offsetWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {},\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetSizeAttr: 'offsetHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {},\n      },\n    };\n    this.removePreventClickId = null;\n    this.isScrolling = false;\n    this.isMouseEntering = false;\n\n    // Don't re-instantiate over an existing one\n    if (SimpleBar.instances.has(this.el)) {\n      return;\n    }\n    if (options.classNames) {\n      console.warn(\n        'simplebar: classNames option is deprecated. Please override the styles with CSS instead.'\n      );\n    }\n\n    if (options.autoHide) {\n      console.warn(\n        \"simplebar: autoHide option is deprecated. Please use CSS instead: '.simplebar-scrollbar::before { opacity: 0.5 };' for autoHide: false\"\n      );\n    }\n\n    this.onMouseMove = throttle(this.onMouseMove, 64);\n    this.onWindowResize = debounce(this.onWindowResize, 64, { leading: true });\n    this.onStopScrolling = debounce(this.onStopScrolling, this.stopScrollDelay);\n    this.onMouseEntered = debounce(this.onMouseEntered, this.stopScrollDelay);\n\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n\n    this.init();\n  }\n\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n  static getRtlHelpers() {\n    const dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML =\n      '<div class=\"simplebar-dummy-scrollbar-size\"><div></div></div>';\n\n    const scrollbarDummyEl = dummyDiv.firstElementChild;\n    const dummyChild = scrollbarDummyEl.firstElementChild;\n\n    document.body.appendChild(scrollbarDummyEl);\n\n    scrollbarDummyEl.scrollLeft = 0;\n\n    const dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    const dummyChildOffset = SimpleBar.getOffset(dummyChild);\n\n    scrollbarDummyEl.scrollLeft = -999;\n    const dummyChildOffsetAfterScroll = SimpleBar.getOffset(dummyChild);\n\n    return {\n      // determines if the scrolling is responding with negative values\n      isScrollOriginAtZero: dummyContainerOffset.left !== dummyChildOffset.left,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isScrollingToNegative:\n        dummyChildOffset.left !== dummyChildOffsetAfterScroll.left,\n    };\n  }\n\n  static defaultOptions = {\n    autoHide: true,\n    forceVisible: false,\n    clickOnTrack: true,\n    scrollbarMinSize: 25,\n    scrollbarMaxSize: 0,\n  };\n\n  static getOffset(el) {\n    const rect = el.getBoundingClientRect();\n    const elDocument = getElementDocument(el);\n    const elWindow = getElementWindow(el);\n\n    return {\n      top:\n        rect.top +\n        (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n      left:\n        rect.left +\n        (elWindow.pageXOffset || elDocument.documentElement.scrollLeft),\n    };\n  }\n\n  static instances = new WeakMap();\n\n  init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    SimpleBar.instances.set(this.el, this);\n\n    // We stop here on server-side\n    if (canUseDOM) {\n      this.initDOM();\n\n      this.scrollbarWidth = this.getScrollbarWidth();\n\n      this.recalculate();\n\n      this.initListeners();\n    }\n  }\n\n  initDOM() {\n    // make sure this element doesn't have the elements yet\n    if (\n      Array.prototype.filter.call(this.el.children, (child) =>\n        child.classList.contains(this.classNames.wrapper)\n      ).length\n    ) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(`.${this.classNames.wrapper}`);\n      this.contentWrapperEl =\n        this.options.scrollableNode ||\n        this.el.querySelector(`.${this.classNames.contentWrapper}`);\n      this.contentEl =\n        this.options.contentNode ||\n        this.el.querySelector(`.${this.classNames.contentEl}`);\n\n      this.offsetEl = this.el.querySelector(`.${this.classNames.offset}`);\n      this.maskEl = this.el.querySelector(`.${this.classNames.mask}`);\n\n      this.placeholderEl = this.findChild(\n        this.wrapperEl,\n        `.${this.classNames.placeholder}`\n      );\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverWrapperEl}`\n      );\n      this.heightAutoObserverEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverEl}`\n      );\n      this.axis.x.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.horizontal}`\n      );\n      this.axis.y.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.vertical}`\n      );\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(\n        this.classNames.heightAutoObserverWrapperEl\n      );\n      this.heightAutoObserverEl.classList.add(\n        this.classNames.heightAutoObserverEl\n      );\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      const track = document.createElement('div');\n      const scrollbar = document.createElement('div');\n\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n\n      track.appendChild(scrollbar);\n\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  }\n\n  initListeners() {\n    const elWindow = getElementWindow(this.el);\n    // Event listeners\n\n    this.el.addEventListener('mouseenter', this.onMouseEnter);\n\n    ['mousedown', 'click', 'dblclick'].forEach((e) => {\n      this.el.addEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach((e) => {\n      this.el.addEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true,\n      });\n    });\n\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll);\n\n    // Browser zoom triggers a window resize\n    elWindow.addEventListener('resize', this.onWindowResize);\n\n    if (window.ResizeObserver) {\n      // Hack for https://github.com/WICG/ResizeObserver/issues/38\n      let resizeObserverStarted = false;\n      const resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n      this.resizeObserver = new resizeObserver(() => {\n        if (!resizeObserverStarted) return;\n\n        elWindow.requestAnimationFrame(() => {\n          this.recalculate();\n        });\n      });\n\n      this.resizeObserver.observe(this.el);\n      this.resizeObserver.observe(this.contentEl);\n\n      elWindow.requestAnimationFrame(() => {\n        resizeObserverStarted = true;\n      });\n    }\n\n    // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n    this.mutationObserver = new elWindow.MutationObserver(() => {\n      elWindow.requestAnimationFrame(() => {\n        this.recalculate();\n      });\n    });\n\n    this.mutationObserver.observe(this.contentEl, {\n      childList: true,\n      subtree: true,\n      characterData: true,\n    });\n  }\n\n  recalculate() {\n    const elWindow = getElementWindow(this.el);\n    this.elStyles = elWindow.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n\n    const contentElOffsetWidth = this.contentEl.offsetWidth;\n\n    const isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    const isWidthAuto =\n      this.heightAutoObserverEl.offsetWidth <= 1 || contentElOffsetWidth > 0;\n\n    const contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n\n    const elOverflowX = this.elStyles.overflowX;\n    const elOverflowY = this.elStyles.overflowY;\n\n    this.contentEl.style.padding = `${this.elStyles.paddingTop} ${this.elStyles.paddingRight} ${this.elStyles.paddingBottom} ${this.elStyles.paddingLeft}`;\n    this.wrapperEl.style.margin = `-${this.elStyles.paddingTop} -${this.elStyles.paddingRight} -${this.elStyles.paddingBottom} -${this.elStyles.paddingLeft}`;\n\n    const contentElScrollHeight = this.contentEl.scrollHeight;\n    const contentElScrollWidth = this.contentEl.scrollWidth;\n\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%';\n\n    // Determine placeholder size\n    this.placeholderEl.style.width = isWidthAuto\n      ? `${contentElOffsetWidth || contentElScrollWidth}px`\n      : 'auto';\n    this.placeholderEl.style.height = `${contentElScrollHeight}px`;\n\n    const contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n\n    this.axis.x.isOverflowing =\n      contentElOffsetWidth !== 0 && contentElScrollWidth > contentElOffsetWidth;\n    this.axis.y.isOverflowing =\n      contentElScrollHeight > contentWrapperElOffsetHeight;\n\n    // Set isOverflowing to false if user explicitely set hidden overflow\n    this.axis.x.isOverflowing =\n      elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing =\n      elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n\n    this.axis.x.forceVisible =\n      this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible =\n      this.options.forceVisible === 'y' || this.options.forceVisible === true;\n\n    this.hideNativeScrollbar();\n\n    // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n    let offsetForXScrollbar = this.axis.x.isOverflowing\n      ? this.scrollbarWidth\n      : 0;\n    let offsetForYScrollbar = this.axis.y.isOverflowing\n      ? this.scrollbarWidth\n      : 0;\n\n    this.axis.x.isOverflowing =\n      this.axis.x.isOverflowing &&\n      contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n    this.axis.y.isOverflowing =\n      this.axis.y.isOverflowing &&\n      contentElScrollHeight >\n        contentWrapperElOffsetHeight - offsetForXScrollbar;\n\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n\n    this.axis.x.scrollbar.el.style.width = `${this.axis.x.scrollbar.size}px`;\n    this.axis.y.scrollbar.el.style.height = `${this.axis.y.scrollbar.size}px`;\n\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n\n  /**\n   * Calculate scrollbar size\n   */\n  getScrollbarSize(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return 0;\n    }\n\n    const contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    let scrollbarSize;\n\n    let scrollbarRatio = trackSize / contentSize;\n\n    // Calculate new height/position of drag handle.\n    scrollbarSize = Math.max(\n      ~~(scrollbarRatio * trackSize),\n      this.options.scrollbarMinSize\n    );\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  }\n\n  positionScrollbar(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    const contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    let scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n\n    scrollOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isScrollOriginAtZero\n        ? -scrollOffset\n        : scrollOffset;\n    let scrollPourcent = scrollOffset / (contentSize - hostSize);\n    let handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isScrollingToNegative\n        ? -handleOffset + (trackSize - scrollbar.size)\n        : handleOffset;\n\n    scrollbar.el.style.transform =\n      axis === 'x'\n        ? `translate3d(${handleOffset}px, 0, 0)`\n        : `translate3d(0, ${handleOffset}px, 0)`;\n  }\n\n  toggleTrackVisibility(axis = 'y') {\n    const track = this.axis[axis].track.el;\n    const scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n      this.el.classList.add(`${this.classNames.scrollable}-${axis}`);\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n      this.el.classList.remove(`${this.classNames.scrollable}-${axis}`);\n    }\n\n    // Even if forceVisible is enabled, scrollbar itself should be hidden\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  }\n\n  hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] =\n      this.axis.y.isOverflowing || this.axis.y.forceVisible\n        ? `-${this.scrollbarWidth}px`\n        : 0;\n    this.offsetEl.style.bottom =\n      this.axis.x.isOverflowing || this.axis.x.forceVisible\n        ? `-${this.scrollbarWidth}px`\n        : 0;\n  }\n\n  /**\n   * On scroll event handling\n   */\n  onScroll = () => {\n    const elWindow = getElementWindow(this.el);\n\n    if (!this.scrollXTicking) {\n      elWindow.requestAnimationFrame(this.scrollX);\n      this.scrollXTicking = true;\n    }\n\n    if (!this.scrollYTicking) {\n      elWindow.requestAnimationFrame(this.scrollY);\n      this.scrollYTicking = true;\n    }\n\n    if (!this.isScrolling) {\n      this.isScrolling = true;\n      this.el.classList.add(this.classNames.scrolling);\n    }\n\n    this.onStopScrolling();\n  };\n\n  scrollX = () => {\n    if (this.axis.x.isOverflowing) {\n      this.positionScrollbar('x');\n    }\n\n    this.scrollXTicking = false;\n  };\n\n  scrollY = () => {\n    if (this.axis.y.isOverflowing) {\n      this.positionScrollbar('y');\n    }\n\n    this.scrollYTicking = false;\n  };\n\n  onStopScrolling = () => {\n    this.el.classList.remove(this.classNames.scrolling);\n    this.isScrolling = false;\n  };\n\n  onMouseEnter = () => {\n    if (!this.isMouseEntering) {\n      this.el.classList.add(this.classNames.mouseEntered);\n      this.isMouseEntering = true;\n    }\n    this.onMouseEntered();\n  };\n\n  onMouseEntered = () => {\n    this.el.classList.remove(this.classNames.mouseEntered);\n    this.isMouseEntering = false;\n  };\n\n  onMouseMove = (e) => {\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseMoveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseMoveForAxis('y');\n    }\n  };\n\n  onMouseMoveForAxis(axis = 'y') {\n    this.axis[axis].track.rect = this.axis[\n      axis\n    ].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n\n    const isWithinScrollbarBoundsX = this.isWithinBounds(\n      this.axis[axis].scrollbar.rect\n    );\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  }\n\n  onMouseLeave = () => {\n    this.onMouseMove.cancel();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseLeaveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseLeaveForAxis('y');\n    }\n\n    this.mouseX = -1;\n    this.mouseY = -1;\n  };\n\n  onMouseLeaveForAxis(axis = 'y') {\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  }\n\n  onWindowResize = () => {\n    // Recalculate scrollbarWidth in case it's a zoom\n    this.scrollbarWidth = this.getScrollbarWidth();\n\n    this.hideNativeScrollbar();\n  };\n\n  onPointerEvent = (e) => {\n    let isWithinTrackXBounds, isWithinTrackYBounds;\n\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      isWithinTrackXBounds = this.isWithinBounds(this.axis.x.track.rect);\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      isWithinTrackYBounds = this.isWithinBounds(this.axis.y.track.rect);\n    }\n\n    // If any pointer event is called on the scrollbar\n    if (isWithinTrackXBounds || isWithinTrackYBounds) {\n      // Preventing the event's default action stops text being\n      // selectable during the drag.\n      e.preventDefault();\n      // Prevent event leaking\n      e.stopPropagation();\n\n      if (e.type === 'mousedown') {\n        if (isWithinTrackXBounds) {\n          this.axis.x.scrollbar.rect = this.axis.x.scrollbar.el.getBoundingClientRect();\n\n          if (this.isWithinBounds(this.axis.x.scrollbar.rect)) {\n            this.onDragStart(e, 'x');\n          } else {\n            this.onTrackClick(e, 'x');\n          }\n        }\n\n        if (isWithinTrackYBounds) {\n          this.axis.y.scrollbar.rect = this.axis.y.scrollbar.el.getBoundingClientRect();\n\n          if (this.isWithinBounds(this.axis.y.scrollbar.rect)) {\n            this.onDragStart(e, 'y');\n          } else {\n            this.onTrackClick(e, 'y');\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * on scrollbar handle drag movement starts\n   */\n  onDragStart(e, axis = 'y') {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n    const eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset =\n      eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n\n    this.el.classList.add(this.classNames.dragging);\n\n    elDocument.addEventListener('mousemove', this.drag, true);\n    elDocument.addEventListener('mouseup', this.onEndDrag, true);\n    if (this.removePreventClickId === null) {\n      elDocument.addEventListener('click', this.preventClick, true);\n      elDocument.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      elWindow.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n\n  /**\n   * Drag scrollbar handle\n   */\n  drag = (e) => {\n    let eventOffset;\n    const track = this.axis[this.draggedAxis].track;\n    const trackSize = track.rect[this.axis[this.draggedAxis].sizeAttr];\n    const scrollbar = this.axis[this.draggedAxis].scrollbar;\n    const contentSize = this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollSizeAttr\n    ];\n    const hostSize = parseInt(\n      this.elStyles[this.axis[this.draggedAxis].sizeAttr],\n      10\n    );\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (this.draggedAxis === 'y') {\n      eventOffset = e.pageY;\n    } else {\n      eventOffset = e.pageX;\n    }\n\n    // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n    let dragPos =\n      eventOffset -\n      track.rect[this.axis[this.draggedAxis].offsetAttr] -\n      this.axis[this.draggedAxis].dragOffset;\n    // Convert the mouse position into a percentage of the scrollbar height/width.\n    let dragPerc = dragPos / (trackSize - scrollbar.size);\n\n    // Scroll the content by the same percentage.\n    let scrollPos = dragPerc * (contentSize - hostSize);\n\n    // Fix browsers inconsistency on RTL\n    if (this.draggedAxis === 'x') {\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isScrollOriginAtZero\n          ? scrollPos - (trackSize + scrollbar.size)\n          : scrollPos;\n    }\n\n    this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollOffsetAttr\n    ] = scrollPos;\n  };\n\n  /**\n   * End scroll handle drag\n   */\n  onEndDrag = (e) => {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.el.classList.remove(this.classNames.dragging);\n\n    elDocument.removeEventListener('mousemove', this.drag, true);\n    elDocument.removeEventListener('mouseup', this.onEndDrag, true);\n    this.removePreventClickId = elWindow.setTimeout(() => {\n      // Remove these asynchronously so we still suppress click events\n      // generated simultaneously with mouseup.\n      elDocument.removeEventListener('click', this.preventClick, true);\n      elDocument.removeEventListener('dblclick', this.preventClick, true);\n      this.removePreventClickId = null;\n    });\n  };\n\n  /**\n   * Handler to ignore click events during drag\n   */\n  preventClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  onTrackClick(e, axis = 'y') {\n    if (!this.options.clickOnTrack) return;\n\n    const elWindow = getElementWindow(this.el);\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n    const scrollbar = this.axis[axis].scrollbar;\n    const scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    let scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    const t =\n      axis === 'y'\n        ? this.mouseY - scrollbarOffset\n        : this.mouseX - scrollbarOffset;\n    const dir = t < 0 ? -1 : 1;\n    const scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n    const speed = 40;\n\n    const scrollTo = () => {\n      if (dir === -1) {\n        if (scrolled > scrollSize) {\n          scrolled -= speed;\n        }\n      } else {\n        if (scrolled < scrollSize) {\n          scrolled += speed;\n        }\n      }\n\n      this.contentWrapperEl[this.axis[axis].scrollOffsetAttr] = scrolled;\n      elWindow.requestAnimationFrame(scrollTo);\n    };\n\n    scrollTo();\n  }\n\n  /**\n   * Getter for content element\n   */\n  getContentElement() {\n    return this.contentEl;\n  }\n\n  /**\n   * Getter for original scrolling element\n   */\n  getScrollElement() {\n    return this.contentWrapperEl;\n  }\n\n  getScrollbarWidth() {\n    // Try/catch for FF 56 throwing on undefined computedStyles\n    try {\n      // Detect browsers supporting CSS scrollbar styling and do not calculate\n      if (\n        getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar')\n          .display === 'none' ||\n        'scrollbarWidth' in document.documentElement.style ||\n        '-ms-overflow-style' in document.documentElement.style\n      ) {\n        return 0;\n      } else {\n        return scrollbarWidth();\n      }\n    } catch (e) {\n      return scrollbarWidth();\n    }\n  }\n\n  removeListeners() {\n    const elWindow = getElementWindow(this.el);\n    // Event listeners\n    this.el.removeEventListener('mouseenter', this.onMouseEnter);\n\n    ['mousedown', 'click', 'dblclick'].forEach((e) => {\n      this.el.removeEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach((e) => {\n      this.el.removeEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true,\n      });\n    });\n\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n\n    this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    elWindow.removeEventListener('resize', this.onWindowResize);\n\n    this.mutationObserver.disconnect();\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Cancel all debounced functions\n    this.onMouseMove.cancel();\n    this.onWindowResize.cancel();\n    this.onStopScrolling.cancel();\n    this.onMouseEntered.cancel();\n  }\n\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  unMount() {\n    this.removeListeners();\n    SimpleBar.instances.delete(this.el);\n  }\n\n  /**\n   * Check if mouse is within bounds\n   */\n  isWithinBounds(bbox) {\n    return (\n      this.mouseX >= bbox.left &&\n      this.mouseX <= bbox.left + bbox.width &&\n      this.mouseY >= bbox.top &&\n      this.mouseY <= bbox.top + bbox.height\n    );\n  }\n\n  /**\n   * Find element children matches query\n   */\n  findChild(el, query) {\n    const matches =\n      el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, (child) =>\n      matches.call(child, query)\n    )[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}