/**
 * simplebar-react - v3.0.0-beta.5
 * React component for SimpleBar
 * https://grsmto.github.io/simplebar/
 *
 * Made by Adrien Denat
 * Under MIT License
 */

import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.object.assign';
import 'core-js/modules/es.object.keys';
import 'core-js/modules/web.dom-collections.for-each';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import React, { useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import SimpleBarJS from 'simplebar-core';

var SimpleBar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$scrollableNodePr = _ref.scrollableNodeProps,
      scrollableNodeProps = _ref$scrollableNodePr === void 0 ? {} : _ref$scrollableNodePr,
      otherProps = _objectWithoutPropertiesLoose(_ref, ["children", "scrollableNodeProps"]);

  var instance;
  var scrollableNodeRef = useRef();
  var elRef = useRef();
  var contentNodeRef = useRef();
  var options = {};
  var rest = {};
  Object.keys(otherProps).forEach(function (key) {
    if (Object.prototype.hasOwnProperty.call(SimpleBarJS.defaultOptions, key)) {
      options[key] = otherProps[key];
    } else {
      rest[key] = otherProps[key];
    }
  });
  useEffect(function () {
    scrollableNodeRef = scrollableNodeProps.ref || scrollableNodeRef;

    if (elRef.current) {
      instance = new SimpleBarJS(elRef.current, Object.assign({}, options, scrollableNodeRef && {
        scrollableNode: scrollableNodeRef.current
      }, contentNodeRef.current && {
        contentNode: contentNodeRef.current
      }));

      if (ref) {
        ref.current = instance;
      }
    }

    return function () {
      instance.unMount();
      instance = null;
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: elRef,
    "data-simplebar": true
  }, rest), /*#__PURE__*/React.createElement("div", {
    className: "simplebar-wrapper"
  }, /*#__PURE__*/React.createElement("div", {
    className: "simplebar-height-auto-observer-wrapper"
  }, /*#__PURE__*/React.createElement("div", {
    className: "simplebar-height-auto-observer"
  })), /*#__PURE__*/React.createElement("div", {
    className: "simplebar-mask"
  }, /*#__PURE__*/React.createElement("div", {
    className: "simplebar-offset"
  }, typeof children === 'function' ? children({
    scrollableNodeRef: scrollableNodeRef,
    contentNodeRef: contentNodeRef
  }) : /*#__PURE__*/React.createElement("div", _extends({}, scrollableNodeProps, {
    className: "simplebar-content-wrapper" + (scrollableNodeProps.className ? " " + scrollableNodeProps.className : '')
  }), /*#__PURE__*/React.createElement("div", {
    className: "simplebar-content"
  }, children)))), /*#__PURE__*/React.createElement("div", {
    className: "simplebar-placeholder"
  })), /*#__PURE__*/React.createElement("div", {
    className: "simplebar-track simplebar-horizontal"
  }, /*#__PURE__*/React.createElement("div", {
    className: "simplebar-scrollbar"
  })), /*#__PURE__*/React.createElement("div", {
    className: "simplebar-track simplebar-vertical"
  }, /*#__PURE__*/React.createElement("div", {
    className: "simplebar-scrollbar"
  })));
});
SimpleBar.displayName = 'SimpleBar';
SimpleBar.propTypes = {
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
  scrollableNodeProps: PropTypes.object
};

export default SimpleBar;
